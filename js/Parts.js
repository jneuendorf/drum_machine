// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App.Part = (function() {
    Part["new"] = function(subClassName, master, container, className, id) {
      var _name;
      return typeof App[_name = "Part" + subClassName] === "function" ? new App[_name](master, container, className, id) : void 0;
    };

    function Part(_master, container, _className, _id) {
      this._master = _master;
      this._className = _className;
      this._id = _id;
      if (!(container instanceof jQuery)) {
        this._container = $(container);
      } else {
        this._container = container;
      }
    }

    Part.prototype.makeContainer = function() {
      return $("<div id='" + this._id + "' class='" + this._className + "' />");
    };

    Part.prototype.draw = function() {
      throw new Error("Override this method to implement it!");
    };

    return Part;

  })();

  App.PartDrumkits = (function(_super) {
    __extends(PartDrumkits, _super);

    function PartDrumkits(master, container, className, id) {
      PartDrumkits.__super__.constructor.call(this, master, container, className, id);
    }

    PartDrumkits.prototype.draw = function() {
      var div, filePath, firstDraw, instrumentName, kitFiles, kitName, master, _ref;
      div = this._container.find("." + this._id);
      firstDraw = div.length === 0;
      master = this._master;
      if (firstDraw) {
        div = this.makeContainer();
      }
      div.empty();
      _ref = master.getDrumkits();
      for (kitName in _ref) {
        kitFiles = _ref[kitName];
        for (instrumentName in kitFiles) {
          filePath = kitFiles[instrumentName];
          div.append("<div class=\"instrument\" data-kitname=\"" + kitName + "\" data-instrumentname=\"" + instrumentName + "\">\n	<div class=\"label\" style=\"margin-top: 2px;\">" + instrumentName + "</div>\n</div>");
        }
      }
      div.find(".instrument").draggable({
        cursor: "move",
        revert: "invalid",
        revertDuration: 200
      });
      if (firstDraw) {
        this._container.append(div);
      }
      return this;
    };

    return PartDrumkits;

  })(App.Part);

  App.PartInstruments = (function(_super) {
    __extends(PartInstruments, _super);

    function PartInstruments(master, container, className, id) {
      PartInstruments.__super__.constructor.call(this, master, container, className, id);
    }

    PartInstruments.prototype.draw = function() {
      var div, firstDraw, idx, instrument, master, name, temp, _i, _len, _ref;
      div = this._container.find("." + this._id);
      firstDraw = div.length === 0;
      master = this._master;
      if (firstDraw) {
        div = this.makeContainer();
      }
      div.empty();
      _ref = master.getInstruments();
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        instrument = _ref[idx];
        if (instrument != null) {
          name = instrument.getName();
          temp = $("<div class=\"instrument\">\n		<input class=\"label\" value=\"" + name + "\" />\n		<!--span class=\"edit\" title=\"rename instrument\" /-->\n		<span class=\"close\" data-idx=\"" + idx + "\" title=\"delete instrument\">&#10006;</span>\n</div>");
          temp.find(".close").click(function() {
            master.removeInstrument(parseInt(this.getAttribute("data-idx"), 10));
            return false;
          });
        } else {
          name = "Drop drumkit here to add";
          temp = $("<div class=\"droppableArea\"><div class=\"instrument add\"><div class=\"label\" style=\"margin-top: 2px;\">" + name + "</div></div></div>");
          temp.droppable({
            accept: "#drumkits .instrument",
            over: function(ev, ui) {
              temp.animate({
                "padding-top": "34px"
              }, 200);
              return this;
            },
            out: function(ev, ui) {
              temp.animate({
                "padding-top": "0px"
              }, 200);
              return this;
            },
            drop: function(ev, ui) {
              var instrumentDiv, instrumentName, kitName;
              console.log(ui);
              instrumentDiv = ui.draggable;
              kitName = instrumentDiv.attr("data-kitname");
              instrumentName = instrumentDiv.attr("data-instrumentname");
              instrument = master.getDrumkits()[kitName][instrumentName];
              if (instrument != null) {
                master.addInstrument(instrument);
              }
              instrumentDiv.animate({
                left: 0,
                top: 0
              }, 200);
              return this;
            }
          });
        }
        div.append(temp);
      }
      if (firstDraw) {
        this._container.append(div);
      }
      return this;
    };

    return PartInstruments;

  })(App.Part);

  App.PartPlayButtons = (function(_super) {
    __extends(PartPlayButtons, _super);

    function PartPlayButtons(master, container, className, id) {
      PartPlayButtons.__super__.constructor.call(this, master, container, className, id);
    }

    PartPlayButtons.prototype.makeContainer = function() {
      return $("<div id='" + this._id + "' class='" + this._className + "' />");
    };

    PartPlayButtons.prototype.draw = function() {
      var container, div, master, self;
      self = this;
      div = this._container.find("." + this._id);
      master = this._master;
      if (div.length > 0) {
        return this;
      }
      container = this.makeContainer();
      div = container.append("<div class='playbutton play' /><div class='playbutton stop' /><div class='clear' /><button class='import'>Import</button><button class='export'>Export</button>");
      div.find(".play").click(function() {
        var t;
        t = $(this);
        if (!master.isPlaying()) {
          t.addClass("pause");
          master.startPlaying();
        } else {
          t.removeClass("pause");
          master.pause();
        }
        return this;
      });
      div.find(".stop").click(function() {
        master.stop();
        div.find(".play").removeClass("pause");
        return this;
      });
      div.find(".import").click(function() {
        master.showPopup();
        return this;
      });
      div.find(".export").click(function() {
        master["export"]();
        return this;
      });
      this._container.append(container);
      return this;
    };

    return PartPlayButtons;

  })(App.Part);

  App.PartNotes = (function(_super) {
    __extends(PartNotes, _super);

    function PartNotes(master, container, className, id) {
      PartNotes.__super__.constructor.call(this, master, container, className, id);
    }

    PartNotes.prototype.draw = function() {
      var addMeasureBtn, div, firstDraw, idx, mDiv, master, measure, _i, _len, _ref;
      div = this._container.find("." + this._id);
      firstDraw = div.length === 0;
      master = this._master;
      if (firstDraw) {
        div = this.makeContainer();
      }
      div.empty();
      idx = 0;
      _ref = master.getMeasures();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        measure = _ref[_i];
        mDiv = measure.draw().getDiv();
        mDiv.find(".column").each(function() {
          return $(this).attr("data-absidx", idx++);
        });
        div.append(mDiv);
      }
      addMeasureBtn = $("<button class='addMeasure'>add meausure</button>");
      addMeasureBtn.click(function() {
        master.addMeasure();
        return this;
      });
      div.append(addMeasureBtn);
      if (firstDraw) {
        this._container.append(div);
      }
      return this;
    };

    return PartNotes;

  })(App.Part);

  App.PartImportExport = (function(_super) {
    __extends(PartImportExport, _super);

    function PartImportExport(master, container, className, id) {
      PartImportExport.__super__.constructor.call(this, master, container, className, id);
      this._div = null;
      this._text = "";
    }

    PartImportExport.prototype.draw = function() {
      var div, firstDraw, master;
      div = this._container.find("." + this._id);
      firstDraw = div.length === 0;
      master = this._master;
      if (firstDraw) {
        div = this.makeContainer().append("	<textarea id=\"copyFrom\" class=\"text\" />\n<!--button class=\"copy\" data-clipboard-target=\"copyFrom\" title=\"Click to copy data\">copy</button-->\n<button class=\"import\" title=\"import\">import</button>\n<button class=\"close\" title=\"close popup\">close</button>");
        div.find("button.import").click((function(_this) {
          return function() {
            master["import"]();
            return _this;
          };
        })(this));
        div.find("button.close").click(function() {
          master.hidePopup();
          return this;
        });
        this._div = div;
        master.setPopup(this._div);
        this._container.append(div);
      }
      return this;
    };

    PartImportExport.prototype.getDiv = function() {
      return this._div;
    };

    PartImportExport.prototype.setText = function(text, updateButton) {
      if (updateButton == null) {
        updateButton = true;
      }
      this._text = text;
      if (updateButton === true) {
        this._div.find(".copy").attr("data-clipboard-text", this._text);
      }
      return this;
    };

    return PartImportExport;

  })(App.Part);

}).call(this);
