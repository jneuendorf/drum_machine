// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  App.Measure = (function() {
    var count;

    Measure.maxBPM = 480;

    Measure.modes = [1, 2, 4, 8, 16];

    Measure.stepSizes = [16, 8, 4, 2, 1];

    count = 0;

    Measure.getID = function() {
      return "measure" + count++;
    };

    function Measure(_drumMachine, _instruments, quarterSplit, _beats, _bpm) {
      var col, data, idx, modes, x, xMax, y, yMax, _i, _j;
      this._drumMachine = _drumMachine;
      this._instruments = _instruments;
      this._beats = _beats;
      this._bpm = _bpm;
      modes = App.Measure.modes;
      this._noteIndex = 0;
      this._div = null;
      this._id = App.Measure.getID();
      idx = App.Measure.modes.indexOf(quarterSplit);
      if (idx < 0) {
        idx = 1;
      }
      this._stepSize = App.Measure.stepSizes[idx];
      data = [];
      xMax = this._beats * modes[modes.length - 1];
      yMax = _instruments.length;
      for (x = _i = 0; 0 <= xMax ? _i < xMax : _i > xMax; x = 0 <= xMax ? ++_i : --_i) {
        col = [];
        for (y = _j = 0; 0 <= yMax ? _j < yMax : _j > yMax; y = 0 <= yMax ? ++_j : --_j) {
          col.push(null);
        }
        data[x] = col;
      }
      this._data = data;
    }

    Measure.prototype.drawSettings = function() {
      var drawOptions, resetBPM, resetStepSize, settings;
      resetBPM = (function(_this) {
        return function(ev, textfield) {
          _this.setBPM(parseInt(textfield.value, 10));
          return _this;
        };
      })(this);
      resetStepSize = (function(_this) {
        return function(ev, select) {
          _this.setStepSize(parseInt(select.value, 10));
          _this.draw();
          return _this;
        };
      })(this);
      drawOptions = (function(_this) {
        return function() {
          var i, res, val, _i, _len, _ref;
          res = "";
          _ref = App.Measure.stepSizes;
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            val = _ref[i];
            if (_this._stepSize !== val) {
              res += "<option value='" + val + "'>" + (App.Measure.modes[i] * 4) + "th</option>";
            } else {
              res += "<option value='" + val + "' selected>" + (App.Measure.modes[i] * 4) + "th</option>";
            }
          }
          return res;
        };
      })(this);
      settings = $("<div class=\"measureSettings\">\n	<div class=\"split setting\">\n		<select class=\"select\">\n			" + (drawOptions()) + "\n		</select>\n		notes,\n	</div>\n	<div class=\"bpm setting\">\n		BPM: <input class=\"bpm\" type=\"number\" value=\"" + this._bpm + "\" min=\"1\" max=\"" + App.Measure.maxBPM + "\" />\n	</div>\n	<div class=\"close setting\">\n		&#10006;\n	</div>\n	<div class=\"clear\" />\n</div>");
      settings.find(".select").change(function(ev) {
        return resetStepSize(ev, this);
      });
      settings.find("input.bpm").change(function(ev) {
        return resetBPM(ev, this);
      });
      settings.find(".close").click((function(_this) {
        return function(ev) {
          return _this.remove();
        };
      })(this));
      return settings;
    };

    Measure.prototype.draw = function() {
      var col, column, div, firstDraw, i, idx, note, _fn, _i, _j, _len, _ref, _ref1, _ref2;
      div = this._div;
      firstDraw = !(div instanceof jQuery);
      if (firstDraw) {
        div = $("<div class='measure' id='" + this._id + "' />");
      }
      div.empty().append(this.drawSettings());
      _ref1 = this._data;
      _ref = this._stepSize;
      for ((_ref > 0 ? (idx = _i = 0, _len = _ref1.length) : idx = _i = _ref1.length - 1); _ref > 0 ? _i < _len : _i >= 0; idx = _i += _ref) {
        col = _ref1[idx];
        column = $("<div class='column' data-colidx='" + idx + "' />");
        _fn = (function(_this) {
          return function(i, note, idx) {
            return note.click(function() {
              _this.toggleNote(idx, i);
              if (_this.noteIsActive(idx, i)) {
                return note.addClass("active");
              } else {
                return note.removeClass("active");
              }
            });
          };
        })(this);
        for (i = _j = 0, _ref2 = col.length - 1; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
          note = col[i];
          note = $("<div class='instrument note" + (note != null ? " active" : "") + "' />");
          _fn(i, note, idx);
          column.append(note);
        }
        div.append(column);
      }
      div.append("<div class='clear' />");
      if (firstDraw) {
        this._div = div;
      }
      return this;
    };

    Measure.prototype.remove = function() {
      this._drumMachine.removeMeasure(this);
      return this;
    };

    Measure.prototype.toggleNote = function(x, y) {
      if (this._data[x][y] instanceof App.Instrument) {
        this._data[x][y] = null;
      } else {
        this._data[x][y] = this._instruments[y];
      }
      return this;
    };

    Measure.prototype.noteIsActive = function(x, y) {
      return this._data[x][y] instanceof App.Instrument;
    };

    Measure.prototype.getDiv = function() {
      return this._div;
    };

    Measure.prototype.getNextColumn = function(activeNotes, cycle) {
      if (activeNotes == null) {
        activeNotes = true;
      }
      if (cycle == null) {
        cycle = false;
      }
      if (this._noteIndex === this._data.length - 1) {
        if (!cycle) {
          return this.getColumnAtIndex(activeNotes, -1);
        } else {
          this._noteIndex = 0;
        }
      } else {
        this._noteIndex += this._stepSize;
      }
      return this.getCurrentColumn(activeNotes);
    };

    Measure.prototype.resetPosition = function() {
      this._noteIndex = 0;
      return this;
    };

    Measure.prototype.getCurrentColumn = function(activeNotes) {
      if (activeNotes == null) {
        activeNotes = true;
      }
      return this.getColumnAtIndex(activeNotes, this._noteIndex);
    };

    Measure.prototype.getColumnAtIndex = function(activeNotes, idx) {
      var instrument;
      if (idx < 0 || idx >= this._data.length) {
        return null;
      }
      if (activeNotes === true) {
        return (function() {
          var _i, _len, _ref, _results;
          _ref = this._data[idx];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            instrument = _ref[_i];
            if (instrument != null) {
              _results.push(instrument);
            }
          }
          return _results;
        }).call(this);
      }
      return this._data[idx];
    };

    Measure.prototype.getIntervalDelay = function() {
      return ((this._beats * 60000) / this._bpm) / this.getVisibleLength();
    };

    Measure.prototype.getColumnDivs = function() {
      return this._div.find(".column");
    };

    Measure.prototype.getCurrentColumnDiv = function() {
      return this.getColumnDivs().eq(this._noteIndex / this._stepSize);
    };

    Measure.prototype.addInstumentToData = function(instrument) {
      var col, _i, _len, _ref;
      _ref = this._data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        col = _ref[_i];
        col.push(null);
      }
      return this;
    };

    Measure.prototype.removeInstrumentFromData = function(index) {
      var col, _i, _len, _ref;
      _ref = this._data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        col = _ref[_i];
        col.splice(index, 1);
      }
      return this;
    };

    Measure.prototype.serialize = function() {
      var col, data, note, temp, _i, _j, _len, _len1, _ref;
      data = [];
      _ref = this._data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        col = _ref[_i];
        temp = [];
        for (_j = 0, _len1 = col.length; _j < _len1; _j++) {
          note = col[_j];
          if (note != null) {
            temp.push(1);
          } else {
            temp.push(0);
          }
        }
        data.push(temp);
      }
      return {
        beats: this._beats,
        bpm: this._bpm,
        data: data
      };
    };

    Measure.prototype.setBPM = function(bpm) {
      if ((1 <= bpm && bpm <= App.Measure.maxBPM)) {
        this._bpm = Math.floor(bpm);
      } else {
        this._bpm = 120;
      }
      return this;
    };

    Measure.prototype.setStepSize = function(stepSize) {
      if (__indexOf.call(App.Measure.stepSizes, stepSize) >= 0) {
        this._stepSize = stepSize;
      } else {
        this._stepSize = 2;
      }
      return this;
    };

    Measure.prototype.setInstruments = function(instruments) {
      this._instruments = instruments;
      return this;
    };

    Measure.prototype.setData = function(data) {
      this._data = data;
      return this;
    };

    Measure.prototype.getDrumMachine = function() {
      return this._drumMachine;
    };

    Measure.prototype.getInstruments = function() {
      return this._instruments;
    };

    Measure.prototype.getVisibleLength = function() {
      return this._data.length / this._stepSize;
    };

    Measure.prototype.getBeats = function() {
      return this._beats;
    };

    Measure.prototype.getLength = function() {
      return this._data.length;
    };

    Measure.prototype.getID = function() {
      return this._id;
    };

    Measure.prototype.getNoteIndex = function() {
      return this._noteIndex;
    };

    Measure.prototype.getBPM = function() {
      return this._bpm;
    };

    return Measure;

  })();

}).call(this);
