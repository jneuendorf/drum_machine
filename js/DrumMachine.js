// Generated by CoffeeScript 1.7.1
(function() {
  App.DrumMachine = (function() {
    DrumMachine["new"] = function(container, drumkits, instruments) {
      return new App.DrumMachine(container, drumkits, instruments);
    };

    function DrumMachine(container, _drumkits, instruments) {
      this._drumkits = _drumkits;
      if (instruments == null) {
        instruments = [];
      }
      if (!(container instanceof jQuery)) {
        container = $(container);
      }
      this._container = container;
      if (instruments instanceof Array) {
        this._instruments = instruments;
      } else {
        this._instruments = [];
      }
      this._measureIdx = 0;
      this._noteIdx = 0;
      this._position = 0;
      this._interval = null;
      this._popup = null;
      this._parts = [new App.Part["new"]("Drumkits", this, container, "drumkits", "drumkits"), new App.Part["new"]("PlayButtons", this, container, "playbuttons", "playbuttons"), new App.Part["new"]("Instruments", this, container, "instruments", "instruments"), new App.Part["new"]("Notes", this, container, "notes", "notes"), new App.Part["new"]("ImportExport", this, container, "importExport", "importExport")];
      this._measures = [];
      this._measures.push(new App.Measure(this._instruments, 2, 4, 120));
      this._measures.push(new App.Measure(this._instruments, 2, 3, 120));
      console.log(this);
    }

    DrumMachine.prototype.draw = function() {
      var part, _i, _len, _ref;
      _ref = this._parts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        part = _ref[_i];
        part.draw();
      }
      return this;
    };

    DrumMachine.prototype.drawPartial = function(ignoreList) {
      var drawPart, part, partToIgnore, _i, _j, _len, _len1, _ref;
      if (!(ignoreList instanceof Array)) {
        ignoreList = [ignoreList];
      }
      _ref = this._parts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        part = _ref[_i];
        drawPart = true;
        for (_j = 0, _len1 = ignoreList.length; _j < _len1; _j++) {
          partToIgnore = ignoreList[_j];
          if (part instanceof partToIgnore) {
            drawPart = false;
            break;
          }
        }
        if (drawPart) {
          part.draw();
        }
      }
      return this;
    };

    DrumMachine.prototype.showPopup = function() {
      this._popup.fadeIn(200);
      return this;
    };

    DrumMachine.prototype.hidePopup = function() {
      this._popup.fadeOut(200);
      return this;
    };

    DrumMachine.prototype["export"] = function() {
      var instrument, instruments, json, measure, measures;
      instruments = (function() {
        var _i, _len, _ref, _results;
        _ref = this._instruments;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          instrument = _ref[_i];
          if (instrument != null) {
            _results.push(instrument.serialize());
          }
        }
        return _results;
      }).call(this);
      measures = (function() {
        var _i, _len, _ref, _results;
        _ref = this._measures;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          measure = _ref[_i];
          _results.push(measure.serialize());
        }
        return _results;
      }).call(this);
      json = JSON.stringify({
        "instruments": instruments,
        "measures": measures
      });
      this._popup.fadeIn(200).find(".text").val(json);
      return this;
    };

    DrumMachine.prototype["import"] = function() {
      var instrument, instruments, json, makeInstrumentFromKit, measure, measures, newMeasure, temp, transformData, _i, _j, _len, _len1;
      json = this._popup.find(".text").val();
      if ((json == null) || json === "") {
        return this;
      }
      json = $.parseJSON(json);
      if ((json == null) || $.isEmptyObject(json)) {
        return this;
      }
      makeInstrumentFromKit = (function(_this) {
        return function(kitName, name, volume) {
          var instrument, path;
          path = _this._drumkits[kitName];
          if ((path != null) && ((instrument = path[name]) != null)) {
            console.log(instrument);
            return instrument;
          }
          return null;
        };
      })(this);
      transformData = (function(_this) {
        return function(data, instruments) {
          var col, note, x, y, _i, _j, _len, _len1;
          for (x = _i = 0, _len = data.length; _i < _len; x = ++_i) {
            col = data[x];
            for (y = _j = 0, _len1 = col.length; _j < _len1; y = ++_j) {
              note = col[y];
              if (note === 0) {
                data[x][y] = null;
              } else {
                data[x][y] = instruments[y];
              }
            }
          }
          return data;
        };
      })(this);
      this._instruments = [];
      this._measures = [];
      instruments = json.instruments;
      measures = json.measures;
      for (_i = 0, _len = instruments.length; _i < _len; _i++) {
        instrument = instruments[_i];
        temp = makeInstrumentFromKit(instrument.kitName, instrument.name, instrument.volume);
        if (temp != null) {
          this._instruments.push(temp);
        }
      }
      this._instruments.push(null);
      for (_j = 0, _len1 = measures.length; _j < _len1; _j++) {
        measure = measures[_j];
        newMeasure = new App.Measure(this._instruments, 2, measure.beats, measure.bpm);
        newMeasure.setData(transformData(measure.data, this._instruments));
        this._measures.push(newMeasure);
      }
      this.drawPartial([App.PartDrumkits, App.PartImportExport]);
      this.hidePopup();
      return this;
    };

    DrumMachine.prototype.addInstrument = function(instrument) {
      var measure, _i, _len, _ref;
      if (instrument instanceof App.Instrument) {
        this._instruments.splice(this._instruments.length - 1, 0, instrument);
        _ref = this._measures;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          measure = _ref[_i];
          measure.addInstumentToData(instrument);
        }
        this.drawPartial([App.PartDrumkits, App.PartImportExport]);
      }
      return this;
    };

    DrumMachine.prototype.removeInstrument = function(index) {
      var measure, _i, _len, _ref;
      this._instruments.splice(index, 1);
      _ref = this._measures;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        measure = _ref[_i];
        measure.removeInstrumentFromData(index);
      }
      this.drawPartial([App.PartDrumkits, App.PartImportExport]);
      return this;
    };

    DrumMachine.prototype.getCurrentMeasure = function() {
      return this._measures[this._measureIdx];
    };

    DrumMachine.prototype.nextMeasure = function() {
      var _ref;
      if ((0 <= (_ref = this._measureIdx) && _ref < this._measures.length - 1)) {
        this._measureIdx++;
      } else {
        this._measureIdx = 0;
      }
      return this;
    };

    DrumMachine.prototype.getIntervalDelay = function(measure) {
      if (measure == null) {
        measure = this.getCurrentMeasure();
      }
      return measure.getIntervalDelay();
    };

    DrumMachine.prototype.startPlaying = function() {
      var colDiv, currentColumn, currentMeasure, playColumn, prevDiv;
      currentMeasure = this.getCurrentMeasure();
      currentColumn = currentMeasure.getCurrentColumn();
      colDiv = currentMeasure.getCurrentColumnDiv();
      prevDiv = colDiv.prev();
      playColumn = (function(_this) {
        return function() {
          var instrument, _i, _len;
          if (prevDiv != null) {
            prevDiv.removeClass("current");
          }
          colDiv.addClass("current");
          for (_i = 0, _len = currentColumn.length; _i < _len; _i++) {
            instrument = currentColumn[_i];
            instrument.getSound().play();
          }
          currentColumn = currentMeasure.getNextColumn();
          prevDiv = colDiv;
          if (currentColumn == null) {
            currentMeasure = _this.nextMeasure().getCurrentMeasure().resetPosition();
            currentColumn = currentMeasure.getCurrentColumn();
            colDiv = currentMeasure.getColumnDivs().eq(0);
            window.clearInterval(_this._interval);
            _this._interval = window.setInterval(playColumn, _this.getIntervalDelay(currentMeasure));
          } else {
            colDiv = colDiv.next();
          }
          return true;
        };
      })(this);
      return this._interval = window.setInterval(playColumn, this.getIntervalDelay(currentMeasure));
    };

    DrumMachine.prototype.pause = function() {
      window.clearInterval(this._interval);
      return this._interval = null;
    };

    DrumMachine.prototype.stop = function() {
      var measure, _i, _len, _ref;
      this.pause();
      _ref = this._measures;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        measure = _ref[_i];
        measure.resetPosition();
      }
      this._measureIdx = 0;
      return this.removeCurrentColumnIndicator();
    };

    DrumMachine.prototype.isPlaying = function() {
      return this._interval != null;
    };

    DrumMachine.prototype.removeCurrentColumnIndicator = function() {
      $(".column.current").removeClass("current");
      return this;
    };

    DrumMachine.prototype.getDrumkits = function() {
      return this._drumkits;
    };

    DrumMachine.prototype.getInstruments = function() {
      return this._instruments;
    };

    DrumMachine.prototype.getMeasures = function() {
      return this._measures;
    };

    DrumMachine.prototype.setPopup = function(div) {
      this._popup = div;
      return this;
    };

    return DrumMachine;

  })();

}).call(this);
