// Generated by CoffeeScript 1.9.3
(function() {
  var isNumber,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.DM = {};

  DM.Utils = {
    arrayDiff: function(arr1, arr2) {
      var elem1, idx, j, len, res;
      res = {
        added: [],
        removed: [],
        equal: []
      };
      arr1 = arr1.slice(0);
      arr2 = arr2.slice(0);
      for (j = 0, len = arr1.length; j < len; j++) {
        elem1 = arr1[j];
        idx = arr2.indexOf(elem1);
        if (idx >= 0) {
          res.equal.push(elem1);
          arr2.splice(idx, 1);
        } else if (idx === -1) {
          res.removed.push(elem1);
        }
      }
      res.added = arr2;
      return res;
    }
  };

  isNumber = function(n) {
    if (n instanceof Number) {
      n = n.valueOf();
    }
    return typeof n === "number" && !isNaN(n) && isFinite(n);
  };

  DM.Instrument = (function() {
    var count;

    count = 0;

    Instrument.getID = function() {
      return "instrument" + (count++);
    };

    function Instrument(name, pathToSound, volume) {
      if (volume == null) {
        volume = 0.5;
      }
      this.name = name;
      this.sound = new Howl({
        src: [pathToSound],
        preload: true,
        volume: volume
      });
    }

    Instrument.prototype.generateID = function() {
      return DM.Instrument.getID();
    };

    Instrument.prototype.serialize = function() {
      return {
        name: this.name,
        volume: this.sound.volume
      };
    };

    return Instrument;

  })();

  DM.Measure = (function() {
    var MAX_BEATS, MAX_BPM, MODES, MODE_NAMES, STEPSIZES, count;

    Measure.MAX_BPM = 240;

    MAX_BPM = Measure.MAX_BPM;

    Measure.MAX_BEATS = 20;

    MAX_BEATS = Measure.MAX_BEATS;

    Measure.STEPSIZES = [64, 32, 16, 8, 4, 2, 1];

    Measure.MODES = [1, 2, 4, 8, 16, 32, 64];

    Measure.MODES.LAST = 64;

    Measure.MODE_NAMES = ["whole", "half", "quarter", "8th", "16th", "32nd", "64th"];

    MODES = Measure.MODES;

    MODE_NAMES = Measure.MODE_NAMES;

    STEPSIZES = Measure.STEPSIZES;

    count = 0;

    Measure.getID = function() {
      return "measure" + count++;
    };

    function Measure(drumMachine, timeSignature, mode, bpm) {
      var data, i, idx, instrument, j, len, measureLength, ref;
      this.drumMachine = drumMachine;
      this.beats = timeSignature[0], this.noteValue = timeSignature[1];
      this.bpm = bpm;
      this.instruments = drumMachine.parts.instruments.used;
      this.container = drumMachine.parts.measures.svg;
      this.svg = null;
      this.noteIndex = 0;
      this.id = DM.Measure.getID();
      idx = MODES.indexOf(mode);
      if (idx < 0) {
        idx = 3;
      }
      this.mode = MODES[idx];
      data = {};
      measureLength = this._maxNumNotes();
      ref = this.instruments;
      for (j = 0, len = ref.length; j < len; j++) {
        instrument = ref[j];
        data[instrument] = (function() {
          var k, ref1, results;
          results = [];
          for (i = k = 0, ref1 = measureLength; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
            results.push(null);
          }
          return results;
        })();
      }
      this.data = data;
    }

    Measure.prototype._maxNumNotes = function() {
      return this.mode / this.noteValue * this.beats;
    };

    Measure.prototype.drawSettings = function() {
      var drawOptions, self, settings;
      self = this;
      drawOptions = function() {
        var i, j, len, res, val;
        res = "";
        for (i = j = 0, len = MODES.length; j < len; i = ++j) {
          val = MODES[i];
          res += "<option value=\"" + val + "\"" + (self.mode !== val ? "" : " selected") + ">" + MODE_NAMES[i] + "</option>";
        }
        return res;
      };
      settings = $("<div class=\"measureSettings\">\n    <div class=\"split setting\">\n        <select class=\"select\">\n            " + (drawOptions()) + "\n        </select>\n        notes,\n    </div>\n    <div class=\"bpm setting\">\n        BPM: <input class=\"bpm\" type=\"number\" value=\"" + this.bpm + "\" min=\"1\" max=\"" + MAX_BPM + "\" />\n    </div>\n    <div class=\"timeSignature setting\">\n        Time signature:\n        <input class=\"timeSignatureValue\" data-type=\"numBeats\" type=\"number\" value=\"" + this.timeSignature[0] + "\" min=\"1\" max=\"" + MAX_BEATS + "\" />\n        /\n        <input class=\"timeSignatureValue\" data-type=\"beatValue\" type=\"number\" value=\"" + this.timeSignature[1] + "\" min=\"1\" max=\"" + MAX_BEATS + "\" />\n    </div>\n    <div class=\"close setting\">\n        &#10006;\n    </div>\n    <div class=\"clear\" />\n</div>");
      settings.find(".select").change(function(ev) {
        self.setStepSize(parseInt(this.value, 10));
        return self.draw();
      });
      settings.find("input.bpm").change(function(ev) {
        return self.setBPM(parseInt(this.value, 10));
      });
      settings.find("input.timeSignatureValue").change(function(ev) {
        var value;
        value = parseInt(this.value, 10);
        if ($(this).attr("data-type") === "numBeats") {
          if (value > self.timeSignature[0]) {
            true;
          } else {
            true;
          }
        } else {
          true;
        }
        return true;
      });
      settings.find(".close").click(function(ev) {
        return self.remove();
      });
      return settings;
    };

    Measure.prototype.addInstruments = function() {
      var data, i, instrumentName, instrumentNames, j, len, measureLength;
      instrumentNames = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      console.log("DM.Measure::addInstruments: adding instruments", instrumentNames);
      data = this.data;
      measureLength = this._maxNumNotes();
      for (j = 0, len = instrumentNames.length; j < len; j++) {
        instrumentName = instrumentNames[j];
        data[instrumentName] = (function() {
          var k, ref, results;
          results = [];
          for (i = k = 0, ref = measureLength; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
            results.push(null);
          }
          return results;
        })();
      }
      return this;
    };

    Measure.prototype.removeInstruments = function() {
      var instrumentName, instrumentNames, j, len;
      instrumentNames = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      console.log("DM.Measure::removeInstruments: removing instruments", instrumentNames);
      for (j = 0, len = instrumentNames.length; j < len; j++) {
        instrumentName = instrumentNames[j];
        delete this.data[instrumentName];
      }
      return this;
    };

    Measure.prototype.draw = function(container) {
      var group, idx, instrumentName, j, len, note, notes, ref, ref1, row, rowIdx, self, stepSize;
      self = this;
      group = container.append("g").classed("measure", true);
      stepSize = this.mode / this.noteValue;
      console.log(this.data, stepSize, this.mode);
      rowIdx = 0;
      ref = this.data;
      for (instrumentName in ref) {
        notes = ref[instrumentName];
        row = group.append("g").classed("row", true).attr("transform", "translate(0," + (rowIdx * 20) + ")");
        ref1 = stepSize;
        for ((ref1 > 0 ? (idx = j = 0, len = notes.length) : idx = j = notes.length - 1); ref1 > 0 ? j < len : j >= 0; idx = j += ref1) {
          note = notes[idx];
          row.append("rect").attr("x", idx * 20).attr("y", 0).attr("width", 20).attr("height", 20).attr("stroke", "black").attr("stroke-width", 1).style("fill", "white");
        }
        rowIdx++;
      }
      return this;
    };

    Measure.prototype.remove = function() {
      this.drumMachine.removeMeasure(this);
      return this;
    };

    Measure.prototype.toggleNote = function(x, y) {
      if (this.data[x][y] instanceof DM.Instrument) {
        this.data[x][y] = null;
      } else {
        this.data[x][y] = this.instruments[y];
      }
      return this;
    };

    Measure.prototype.noteIsActive = function(x, y) {
      return this.data[x][y] instanceof DM.Instrument;
    };

    Measure.prototype.getNextColumn = function(activeNotes, cycle) {
      if (activeNotes == null) {
        activeNotes = true;
      }
      if (cycle == null) {
        cycle = false;
      }
      if (this.noteIndex === this.data.length - 1) {
        if (!cycle) {
          return this.getColumnAtIndex(activeNotes, -1);
        } else {
          this.noteIndex = 0;
        }
      } else {
        this.noteIndex += this.stepSize;
      }
      return this.getCurrentColumn(activeNotes);
    };

    Measure.prototype.resetPosition = function() {
      this.noteIndex = 0;
      return this;
    };

    Measure.prototype.getCurrentColumn = function(activeNotes) {
      if (activeNotes == null) {
        activeNotes = true;
      }
      return this.getColumnAtIndex(activeNotes, this.noteIndex);
    };

    Measure.prototype.getColumnAtIndex = function(activeNotes, idx) {
      var instrument;
      if (idx < 0 || idx >= this.data.length) {
        return null;
      }
      if (activeNotes === true) {
        return (function() {
          var j, len, ref, results;
          ref = this.data[idx];
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            instrument = ref[j];
            if (instrument != null) {
              results.push(instrument);
            }
          }
          return results;
        }).call(this);
      }
      return this.data[idx];
    };

    Measure.prototype.getIntervalDelay = function() {
      return ((this.timeSignature[0] * 60000) / this.bpm) / this.getVisibleLength();
    };

    Measure.prototype.getColumnDivs = function() {
      return this.div.find(".column");
    };

    Measure.prototype.getCurrentColumnDiv = function() {
      return this.getColumnDivs().eq(this.noteIndex / this.stepSize);
    };

    Measure.prototype.serialize = function() {
      var col, data, j, k, len, len1, note, ref, temp;
      data = [];
      ref = this.data;
      for (j = 0, len = ref.length; j < len; j++) {
        col = ref[j];
        temp = [];
        for (k = 0, len1 = col.length; k < len1; k++) {
          note = col[k];
          if (note != null) {
            temp.push(1);
          } else {
            temp.push(0);
          }
        }
        data.push(temp);
      }
      return {
        beats: this.timeSignature[0],
        bpm: this.bpm,
        data: data
      };
    };

    Measure.prototype.setBPM = function(bpm) {
      if ((1 <= bpm && bpm <= DM.Measure.maxBPM)) {
        this.bpm = ~~bpm;
        return this;
      }
      this.bpm = 120;
      return this;
    };

    Measure.prototype.setStepSize = function(stepSize) {
      if (indexOf.call(STEPSIZES, stepSize) >= 0) {
        this.stepSize = stepSize;
      } else {
        this.stepSize = 2;
      }
      return this;
    };

    return Measure;

  })();

  DM.Part = (function() {
    Part["new"] = function() {
      var container, drumMachine, params, str, subClassName;
      subClassName = arguments[0], drumMachine = arguments[1], container = arguments[2], params = 4 <= arguments.length ? slice.call(arguments, 3) : [];
      str = subClassName[0].toLowerCase() + subClassName.slice(1);
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(DM["Part" + subClassName], [drumMachine, container, str, str].concat(slice.call(params)), function(){});
    };

    function Part(drumMachine, container, className, id) {
      this.drumMachine = drumMachine;
      this.container = container;
      this.className = className;
      this.id = id;
      this.svg = null;
    }

    Part.prototype.makeContainer = function(x, y) {
      if (this.svg != null) {
        this.container.select("." + this.className).remove();
      }
      return this.container.append("g").attr("id", this.id).attr("class", this.className).attr("transform", "translate(" + x + "," + y + ")");
    };

    Part.prototype.draw = function() {
      throw new Error("Override this method to implement it!");
    };

    return Part;

  })();

  DM.PartInstruments = (function(superClass) {
    extend(PartInstruments, superClass);

    function PartInstruments(drumMachine, container, className, id) {
      PartInstruments.__super__.constructor.call(this, drumMachine, container, className, id);
      this.instruments = [];
      this._used = [];
      Object.defineProperty(this, "used", {
        get: function() {
          return this._used;
        },
        set: function(arr) {
          var elem, idx, j, len;
          if (arr instanceof Array) {
            this._used.length = arr.length;
            for (idx = j = 0, len = arr.length; j < len; idx = ++j) {
              elem = arr[idx];
              this._used[idx] = elem;
            }
          }
          return this;
        }
      });
    }

    PartInstruments.prototype.draw = function() {
      var drumKit, drumMachine, drumkitName, fn, group, instrument, instrumentIdx, instrumentName, ref, self;
      self = this;
      drumMachine = this.drumMachine;
      this.instruments = DM.instruments;
      this.svg = this.makeContainer(10, 10);
      instrumentIdx = 0;
      ref = drumMachine.loader.sprites;
      for (drumkitName in ref) {
        drumKit = ref[drumkitName];
        fn = (function(_this) {
          return function(instrumentName, instrument, instrumentIdx) {
            var group, removeButton;
            group = _this.svg.append("g").classed("instrumentButton", true).attr("data-idx", instrumentIdx).style("cursor", "pointer");
            group.append("rect").attr("class", "instrument").attr("data-instrumentname", instrumentName).attr("x", 10).attr("y", instrumentIdx * 60).attr("width", 200).attr("height", 40).attr("rx", 6).attr("ry", 6).style("stroke", "black").style("stroke-width", 2);
            group.append("text").text(instrumentName).attr("x", 111).attr("y", instrumentIdx * 60 + 26).style("text-anchor", "middle");
            group.append("text").attr("class", "checkmark").text("✓").attr("x", 192).attr("y", instrumentIdx * 60 + 26).style("text-anchor", "middle");
            removeButton = group.append("g").classed("remove", true).attr("transform", "translate(200, " + (instrumentIdx * 60 - 5) + ")").style("display", "none");
            removeButton.append("circle").attr("r", 8).attr("cx", 8).attr("cy", 8).style("fill", "black").style("stroke", "black").style("stroke-width", 2);
            removeButton.append("text").html("&times;").attr("x", 8).attr("y", 13).style("fill", "white").style("text-anchor", "middle");
            removeButton.on("click", function() {
              d3.event.stopPropagation();
              if (confirm("This deletes the instrument permanently for this session. Sure??")) {
                drumMachine.removeInstrument(instrument);
              }
              return false;
            });
            group.on("click", function() {
              var i;
              group = d3.select(this);
              if (indexOf.call(self.used, instrumentName) < 0) {
                self.used.push(instrumentName);
                group.classed("clicked", true);
                drumMachine.addInstrumentsToMeasures(instrumentName);
              } else {
                self.used = (function() {
                  var j, len, ref1, results;
                  ref1 = self.used;
                  results = [];
                  for (j = 0, len = ref1.length; j < len; j++) {
                    i = ref1[j];
                    if (i !== instrumentName) {
                      results.push(i);
                    }
                  }
                  return results;
                })();
                group.classed("clicked", false);
                drumMachine.removeInstrumentsFromMeasures(instrumentName);
              }
              console.log(self.used);
              return true;
            }).on("mouseenter", function() {
              d3.select(this).select(".remove").style("display", "block");
              return true;
            }).on("mouseleave", function() {
              d3.select(this).select(".remove").style("display", "none");
              return true;
            });
            if (indexOf.call(_this.used, instrumentName) >= 0) {
              group.classed("clicked", true);
            }
            return instrument.svg = group;
          };
        })(this);
        for (instrumentName in drumKit) {
          instrument = drumKit[instrumentName];
          fn(instrumentName, instrument, instrumentIdx);
          instrumentIdx++;
        }
      }
      group = this.svg.append("g").attr("data-idx", instrumentIdx).style("cursor", "pointer");
      group.append("rect").attr("class", "instrument").attr("x", 10).attr("y", instrumentIdx * 60).attr("width", 200).attr("height", 40).attr("rx", 6).attr("ry", 6).style("fill", "transparent").style("stroke", "black").style("stroke-width", 2);
      group.append("text").text("Add instrument...").attr("x", 111).attr("y", instrumentIdx * 60 + 26).style("text-anchor", "middle");
      console.log("drumkits done");
      return this;
    };

    return PartInstruments;

  })(DM.Part);

  DM.PartImportExport = (function(superClass) {
    extend(PartImportExport, superClass);

    function PartImportExport(master, container, className, id) {
      PartImportExport.__super__.constructor.call(this, master, container, className, id);
      this._div = null;
      this._text = "";
    }

    PartImportExport.prototype.draw = function() {
      var div, firstDraw, master;
      div = this._container.find("." + this._id);
      firstDraw = div.length === 0;
      master = this._master;
      if (firstDraw) {
        div = this.makeContainer().append("<textarea id=\"copyFrom\" class=\"text\" />\n<!--button class=\"copy\" data-clipboard-target=\"copyFrom\" title=\"Click to copy data\">copy</button-->\n<button class=\"import\" title=\"import\">import</button>\n<button class=\"close\" title=\"close popup\">close</button>");
        div.find("button.import").click((function(_this) {
          return function() {
            master["import"]();
            return _this;
          };
        })(this));
        div.find("button.close").click(function() {
          master.hidePopup();
          return this;
        });
        this._div = div;
        master.setPopup(this._div);
        this._container.append(div);
      }
      return this;
    };

    PartImportExport.prototype.getDiv = function() {
      return this._div;
    };

    PartImportExport.prototype.setText = function(text, updateButton) {
      if (updateButton == null) {
        updateButton = true;
      }
      this._text = text;
      if (updateButton === true) {
        this._div.find(".copy").attr("data-clipboard-text", this._text);
      }
      return this;
    };

    return PartImportExport;

  })(DM.Part);

  DM.PartUsedInstruments = (function(superClass) {
    extend(PartUsedInstruments, superClass);

    PartUsedInstruments["new"] = function(subClassName, drumMachine, container, usedInstruments) {
      var str;
      str = subClassName[0].toLowerCase() + subClassName.slice(1);
      return new App["Part" + subClassName](drumMachine, container, str, str, usedInstruments);
    };

    function PartUsedInstruments(drumMachine, container, className, id, usedInstruments) {
      PartUsedInstruments.__super__.constructor.call(this, drumMachine, container, className, id);
      this.usedInstruments = usedInstruments;
    }

    PartUsedInstruments.prototype.draw = function() {
      var div, drumMachine, group, instrument, instrumentIdx, instrumentName, j, len, ref;
      div = this.container.select("." + this.className);
      drumMachine = this.drumMachine;
      this.svg = this.makeContainer(270, 50);
      instrumentIdx = 0;
      ref = this.usedInstruments;
      for (instrumentIdx = j = 0, len = ref.length; j < len; instrumentIdx = ++j) {
        instrument = ref[instrumentIdx];
        console.log(instrument);
        instrumentName = instrument.name;
        group = this.svg.append("g").attr("data-idx", instrumentIdx).style("cursor", "pointer");
        group.append("rect").attr("class", "instrument").attr("data-instrumentname", instrumentName).attr("x", 10).attr("y", instrumentIdx * 60).attr("width", 200).attr("height", 40).attr("rx", 6).attr("ry", 6).style("fill", "transparent").style("stroke", "black").style("stroke-width", 2);
        group.append("text").text(instrumentName).attr("x", 111).attr("y", instrumentIdx * 60 + 26).style("text-anchor", "middle");
        instrument.svg = group;
        instrumentIdx++;
      }
      console.log("used instruments done");
      return this;
    };

    return PartUsedInstruments;

  })(DM.Part);

  DM.PartMeasures = (function(superClass) {
    extend(PartMeasures, superClass);

    function PartMeasures() {
      return PartMeasures.__super__.constructor.apply(this, arguments);
    }

    PartMeasures.prototype.draw = function() {
      var drumMachine, j, len, measure, ref;
      drumMachine = this.drumMachine;
      this.svg = this.makeContainer(260, 70);
      ref = drumMachine.measures;
      for (j = 0, len = ref.length; j < len; j++) {
        measure = ref[j];
        measure.draw(this.svg);
      }
      return this;
    };

    return PartMeasures;

  })(DM.Part);

  DM.PartPlayButtons = (function(superClass) {
    extend(PartPlayButtons, superClass);

    function PartPlayButtons() {
      return PartPlayButtons.__super__.constructor.apply(this, arguments);
    }

    PartPlayButtons.prototype.draw = function() {
      var drumMachine, group, halfRadius, radius, self;
      self = this;
      drumMachine = this.drumMachine;
      this.svg = this.makeContainer(260, 19);
      radius = 24;
      halfRadius = Math.ceil(radius / 2);
      group = this.svg.append("g").classed("playbutton play", true).attr("transform", "translate(0,0)").style("cursor", "pointer");
      group.append("circle").classed("circle", true).attr("r", radius).attr("cx", halfRadius).attr("cy", halfRadius).style("fill", "transparent").style("stroke", "black").style("stroke-width", 2);
      group.append("text").text("play").attr("x", halfRadius).attr("y", halfRadius + 4).style("text-anchor", "middle");
      group.on("click", function() {
        var textElem;
        textElem = d3.select(this).select("text");
        if (!drumMachine.isPlaying()) {
          textElem.text("pause");
          drumMachine.startPlaying();
        } else {
          textElem.text("play");
          drumMachine.pause();
        }
        return true;
      }).on("mouseenter", function() {
        d3.select(this).select("circle").style("fill", "lightgray");
        return true;
      }).on("mouseleave", function() {
        d3.select(this).select("circle").style("fill", "transparent");
        return true;
      });
      group = this.svg.append("g").classed("playbutton stop", true).attr("transform", "translate(" + (2 * radius + 10) + ",0)").style("cursor", "pointer");
      group.append("circle").classed("circle", true).attr("r", radius).attr("cx", halfRadius).attr("cy", halfRadius).style("fill", "transparent").style("stroke", "black").style("stroke-width", 2);
      group.append("text").text("stop").attr("x", halfRadius).attr("y", halfRadius + 4).style("text-anchor", "middle");
      group.on("click", function() {
        var textElem;
        textElem = d3.select("#" + this.id).select("text");
        textElem.text("play");
        drumMachine.stop();
        return true;
      }).on("mouseenter", function() {
        d3.select(this).select("circle").style("fill", "lightgray");
        return true;
      }).on("mouseleave", function() {
        d3.select(this).select("circle").style("fill", "transparent");
        return true;
      });
      return this;
    };

    return PartPlayButtons;

  })(DM.Part);

  DM.SpriteLoader = (function() {
    var SPRITES;

    SpriteLoader.SPRITES = [
      {
        path: "kit_sprites/",
        json: "rock-drumkit.howler2.json",
        name: "rock-drumkit"
      }
    ];

    SPRITES = SpriteLoader.SPRITES;

    function SpriteLoader() {
      this.drumkits = {};
      this.sprites = [];
    }

    SpriteLoader.prototype.load = function(callback) {
      var done, drumkits, idx, j, len, numSprites, results, self, sprite, sprites;
      self = this;
      drumkits = this.drumkits;
      sprites = this.sprites;
      done = 0;
      numSprites = SPRITES.length;
      results = [];
      for (idx = j = 0, len = SPRITES.length; j < len; idx = ++j) {
        sprite = SPRITES[idx];
        results.push((function(sprite) {
          return $.getJSON(sprite.path + sprite.json, function(soundSpriteConfig) {
            soundSpriteConfig = self.modConfig(sprite, soundSpriteConfig);
            sprites.push(soundSpriteConfig.sprite);
            drumkits[sprite.name] = new Howl(soundSpriteConfig);
            if (++done === numSprites) {
              if (typeof callback === "function") {
                callback();
              }
            }
            return true;
          });
        })(sprite));
      }
      return results;
    };

    SpriteLoader.prototype.modConfig = function(sprite, config) {
      var idx, j, len, ref, src;
      config.volume = 0.7;
      config.preload = true;
      ref = config.src;
      for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
        src = ref[idx];
        config.src[idx] = sprite.path + src;
      }
      return config;
    };

    return SpriteLoader;

  })();

  DM.DrumMachine = (function() {
    DrumMachine["new"] = function(container, instruments) {
      return new DM.DrumMachine(container, instruments);
    };

    function DrumMachine(container, loader) {
      if (container instanceof jQuery) {
        container = container[0];
      }
      this.container = d3.select(container);
      this.loader = loader;
      this.measureIdx = 0;
      this.noteIdx = 0;
      this.position = 0;
      this.interval = null;
      this.popup = null;
      this.svg = this.container.append("svg").attr("xmlns", "http://www.w3.org/2000/svg").attr("class", "drumMachine").attr("width", 1000).attr("height", 1000);
      this.parts = {
        instruments: DM.Part["new"]("Instruments", this, this.svg),
        playButtons: DM.Part["new"]("PlayButtons", this, this.svg),
        measures: DM.Part["new"]("Measures", this, this.svg)
      };
      this.measures = [];
      this.measures.push(new DM.Measure(this, [4, 4], 8, 120));
      console.log(this);
    }

    DrumMachine.prototype.registerDelegation = function(from, name, method) {
      if (this[name] == null) {
        this[name] = function() {
          return method.apply(from, arguments);
        };
      }
      return this;
    };

    DrumMachine.prototype.draw = function() {
      var name, part, ref;
      ref = this.parts;
      for (name in ref) {
        part = ref[name];
        part.draw();
      }
      return this;
    };

    DrumMachine.prototype.drawPartial = function(ignoreList) {
      var name, part, ref;
      if (!(ignoreList instanceof Array)) {
        ignoreList = [ignoreList];
      }
      ref = this.parts;
      for (name in ref) {
        part = ref[name];
        if (indexOf.call(ignoreList, name) < 0) {
          part.draw();
        }
      }
      return this;
    };

    DrumMachine.prototype.showPopup = function() {
      this.popup.fadeIn(200);
      return this;
    };

    DrumMachine.prototype.hidePopup = function() {
      this.popup.fadeOut(200);
      return this;
    };

    DrumMachine.prototype.setUsedInstruments = function() {
      var diff, instrumentNames, j, redraw;
      instrumentNames = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), redraw = arguments[j++];
      if (typeof redraw !== "boolean") {
        instrumentNames.push(redraw);
        redraw = true;
      }
      diff = DM.Utils.arrayDiff(this.parts.instruments.used, instrumentNames);
      this.parts.instruments.used = instrumentNames;
      this.addInstrumentsToMeasures.apply(this, slice.call(diff.added).concat([redraw]));
      this.removeInstrumentsFromMeasures.apply(this, slice.call(diff.removed).concat([redraw]));
      if (redraw === true) {
        this.parts.measures.draw();
      }
      return this;
    };

    DrumMachine.prototype.addInstrumentsToMeasures = function() {
      var instrumentNames, j, k, len, measure, redraw, ref;
      instrumentNames = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), redraw = arguments[j++];
      if (typeof redraw !== "boolean") {
        instrumentNames.push(redraw);
        redraw = true;
      }
      ref = this.measures;
      for (k = 0, len = ref.length; k < len; k++) {
        measure = ref[k];
        measure.addInstruments.apply(measure, instrumentNames);
      }
      if (redraw === true) {
        this.parts.measures.draw();
      }
      return this;
    };

    DrumMachine.prototype.removeInstrumentsFromMeasures = function() {
      var instrumentNames, j, k, len, measure, redraw, ref;
      instrumentNames = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), redraw = arguments[j++];
      if (redraw == null) {
        redraw = true;
      }
      if (typeof redraw !== "boolean") {
        instrumentNames.push(redraw);
        redraw = true;
      }
      ref = this.measures;
      for (k = 0, len = ref.length; k < len; k++) {
        measure = ref[k];
        measure.removeInstruments.apply(measure, instrumentNames);
      }
      if (redraw === true) {
        this.parts.measures.draw();
      }
      return this;
    };

    DrumMachine.prototype.addMeasure = function(measure) {
      console.log(this.measures);
      if (measure == null) {
        measure = new DM.Measure(this, this.instruments, 2, 4, 120);
      }
      this.measures.push(measure);
      this.draw();
      return this;
    };

    DrumMachine.prototype.removeMeasure = function(measure) {
      var m;
      this.measures = (function() {
        var j, len, ref, results;
        ref = this.measures;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          m = ref[j];
          if (m !== measure) {
            results.push(m);
          }
        }
        return results;
      }).call(this);
      this.draw();
      return this;
    };

    DrumMachine.prototype.getCurrentMeasure = function() {
      return this.measures[this.measureIdx];
    };

    DrumMachine.prototype.nextMeasure = function() {
      var ref;
      if ((0 <= (ref = this.measureIdx) && ref < this.measures.length - 1)) {
        this.measureIdx++;
      } else {
        this.measureIdx = 0;
      }
      return this;
    };

    DrumMachine.prototype.getIntervalDelay = function(measure) {
      if (measure == null) {
        measure = this.getCurrentMeasure();
      }
      return measure.getIntervalDelay();
    };

    DrumMachine.prototype.startPlaying = function() {
      var colDiv, currentColumn, currentMeasure, playColumn, prevDiv;
      currentMeasure = this.getCurrentMeasure();
      currentColumn = currentMeasure.getCurrentColumn();
      colDiv = currentMeasure.getCurrentColumnDiv();
      prevDiv = colDiv.prev();
      playColumn = (function(_this) {
        return function() {
          var instrument, j, len;
          if (prevDiv != null) {
            prevDiv.removeClass("current");
          }
          colDiv.addClass("current");
          for (j = 0, len = currentColumn.length; j < len; j++) {
            instrument = currentColumn[j];
            instrument.getSound().play();
          }
          currentColumn = currentMeasure.getNextColumn();
          prevDiv = colDiv;
          if (currentColumn == null) {
            currentMeasure = _this.nextMeasure().getCurrentMeasure().resetPosition();
            currentColumn = currentMeasure.getCurrentColumn();
            colDiv = currentMeasure.getColumnDivs().eq(0);
            window.clearInterval(_this.interval);
            _this.interval = window.setInterval(playColumn, _this.getIntervalDelay(currentMeasure));
          } else {
            colDiv = colDiv.next();
          }
          return true;
        };
      })(this);
      return this.interval = window.setInterval(playColumn, this.getIntervalDelay(currentMeasure));
    };

    DrumMachine.prototype.pause = function() {
      window.clearInterval(this.interval);
      return this.interval = null;
    };

    DrumMachine.prototype.stop = function() {
      var j, len, measure, ref;
      this.pause();
      ref = this.measures;
      for (j = 0, len = ref.length; j < len; j++) {
        measure = ref[j];
        measure.resetPosition();
      }
      this.measureIdx = 0;
      return this.removeCurrentColumnIndicator();
    };

    DrumMachine.prototype.isPlaying = function() {
      return this.interval != null;
    };

    DrumMachine.prototype.removeCurrentColumnIndicator = function() {
      $(".column.current").removeClass("current");
      return this;
    };

    DrumMachine.prototype.getDrumkits = function() {
      return this.drumkits;
    };

    DrumMachine.prototype.getInstruments = function() {
      return this.instruments;
    };

    DrumMachine.prototype.getMeasures = function() {
      return this.measures;
    };

    DrumMachine.prototype.setPopup = function(div) {
      this.popup = div;
      return this;
    };

    return DrumMachine;

  })();

  $(document).ready(function() {
    var dm, loader, start, timer;
    timer = performance || Date;
    start = timer.now();
    dm = null;
    loader = new DM.SpriteLoader();
    return loader.load(function() {
      dm = new DM.DrumMachine(document.body, loader);
      dm.setUsedInstruments("Hi Hat 1", "Snare 1", "Kick 4", false);
      dm.draw();
      window.dm = dm;
      return console.log("time to create drum machine was " + (timer.now() - start) + " ms");
    });
  });

}).call(this);
