// Generated by CoffeeScript 1.9.3
(function() {
  var isNumber,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.App = {};

  App.instruments = {
    "Bass Kick Default": "kits/rock/Kicks/Kick 4.wav",
    "Hihat Default": "kits/rock/Hats/Hi Hat 1.wav",
    "Snare Default": "kits/rock/Snares/Snare 1.wav",
    "High tom": "kits/rock/Toms/tom001.wav",
    "Mid tom": "kits/rock/Toms/tom002.wav",
    "Low tom": "kits/rock/Toms/tom003.wav",
    "Crash": "kits/rock/Cymbals/crash 2.wav",
    "Ride": "kits/rock/Cymbals/ride 1.wav"
  };

  isNumber = function(n) {
    if (n instanceof Number) {
      n = n.valueOf();
    }
    return typeof n === "number" && !isNaN(n) && isFinite(n);
  };

  App.Instrument = (function() {
    var count;

    count = 0;

    Instrument.getID = function() {
      return "instrument" + (count++);
    };

    function Instrument(name, pathToSound, volume) {
      var sound;
      if (volume == null) {
        volume = 50;
      }
      this.name = name.toString();
      sound = soundManager.createSound({
        id: this.generateID(),
        url: pathToSound,
        autoLoad: true,
        volume: (isNumber(volume) ? volume : 50)
      });
      this._sound = sound;
    }

    Instrument.prototype.generateID = function() {
      return App.Instrument.getID();
    };

    Instrument.prototype.setName = function(name) {
      this.name = name;
      return this;
    };

    Instrument.prototype.getName = function() {
      return this.name;
    };

    Instrument.prototype.setSound = function(sound) {
      if (sound === null || (sound !== null && (sound.bytesLoaded != null))) {
        this._sound = sound;
      }
      return this;
    };

    Instrument.prototype.getSound = function() {
      return this._sound;
    };

    Instrument.prototype.serialize = function() {
      return {
        name: this.name,
        volume: this._sound.volume
      };
    };

    return Instrument;

  })();

  App.Measure = (function() {
    var MAX_BEATS, MAX_BPM, MODES, MODE_NAMES, STEPSIZES, count;

    Measure.MAX_BPM = 480;

    MAX_BPM = Measure.MAX_BPM;

    Measure.MAX_BEATS = 20;

    MAX_BEATS = Measure.MAX_BEATS;

    Measure.STEPSIZES = [64, 32, 16, 8, 4, 2, 1];

    Measure.MODES = [1, 2, 4, 8, 16, 32, 64];

    Measure.MODES.LAST = 64;

    Measure.MODE_NAMES = ["whole", "half", "quarter", "8th", "16th", "32nd", "64th"];

    MODES = Measure.MODES;

    MODE_NAMES = Measure.MODE_NAMES;

    STEPSIZES = Measure.STEPSIZES;

    count = 0;

    Measure.getID = function() {
      return "measure" + count++;
    };

    function Measure(drumMachine, instruments, timeSignature, mode, bpm) {
      var data, idx, j, ref, x, xMax, y, yMax;
      this.drumMachine = drumMachine;
      this.instruments = instruments;
      this.timeSignature = timeSignature;
      this.bpm = bpm;
      this.noteIndex = 0;
      this.div = null;
      this.id = App.Measure.getID();
      idx = MODES.indexOf(mode);
      if (idx < 0) {
        idx = 3;
      }
      this.mode = MODES[idx];
      data = [];
      xMax = this.timeSignature[0] * MODES.LAST;
      yMax = this.instruments.length;
      for (x = j = 0, ref = xMax; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
        data[x] = (function() {
          var k, ref1, results;
          results = [];
          for (y = k = 0, ref1 = yMax; 0 <= ref1 ? k < ref1 : k > ref1; y = 0 <= ref1 ? ++k : --k) {
            results.push(null);
          }
          return results;
        })();
      }
      this.data = data;
    }

    Measure.prototype.drawSettings = function() {
      var drawOptions, self, settings;
      self = this;
      drawOptions = function() {
        var i, j, len, res, val;
        res = "";
        for (i = j = 0, len = MODES.length; j < len; i = ++j) {
          val = MODES[i];
          res += "<option value=\"" + val + "\"" + (self.mode !== val ? "" : " selected") + ">" + MODE_NAMES[i] + "</option>";
        }
        return res;
      };
      settings = $("<div class=\"measureSettings\">\n    <div class=\"split setting\">\n        <select class=\"select\">\n            " + (drawOptions()) + "\n        </select>\n        notes,\n    </div>\n    <div class=\"bpm setting\">\n        BPM: <input class=\"bpm\" type=\"number\" value=\"" + this.bpm + "\" min=\"1\" max=\"" + MAX_BPM + "\" />\n    </div>\n    <div class=\"timeSignature setting\">\n        Time signature:\n        <input class=\"timeSignatureValue\" data-type=\"numBeats\" type=\"number\" value=\"" + this.timeSignature[0] + "\" min=\"1\" max=\"" + MAX_BEATS + "\" />\n        /\n        <input class=\"timeSignatureValue\" data-type=\"beatValue\" type=\"number\" value=\"" + this.timeSignature[1] + "\" min=\"1\" max=\"" + MAX_BEATS + "\" />\n    </div>\n    <div class=\"close setting\">\n        &#10006;\n    </div>\n    <div class=\"clear\" />\n</div>");
      settings.find(".select").change(function(ev) {
        self.setStepSize(parseInt(this.value, 10));
        return self.draw();
      });
      settings.find("input.bpm").change(function(ev) {
        return self.setBPM(parseInt(this.value, 10));
      });
      settings.find("input.timeSignatureValue").change(function(ev) {
        var value;
        value = parseInt(this.value, 10);
        if ($(this).attr("data-type") === "numBeats") {
          if (value > self.timeSignature[0]) {
            true;
          } else {
            true;
          }
        } else {
          true;
        }
        return true;
      });
      settings.find(".close").click(function(ev) {
        return self.remove();
      });
      return settings;
    };

    Measure.prototype.draw = function() {
      var col, column, div, firstDraw, fn, i, idx, j, k, len, note, ref, ref1, ref2, self, stepSize;
      self = this;
      div = this.div;
      firstDraw = !(div instanceof jQuery);
      if (firstDraw) {
        div = $("<div class='measure' id='" + this.id + "' />");
      } else {
        div.empty();
      }
      div.append(this.drawSettings());
      stepSize = STEPSIZES[MODES.indexOf(this.mode)];
      console.log(stepSize);
      ref1 = this.data;
      ref = stepSize;
      for ((ref > 0 ? (idx = j = 0, len = ref1.length) : idx = j = ref1.length - 1); ref > 0 ? j < len : j >= 0; idx = j += ref) {
        col = ref1[idx];
        column = $("<div class='column' data-colidx='" + idx + "' />");
        fn = function(i, note, idx) {
          var instrumentDiv;
          instrumentDiv = $("#instruments .instrument").eq(i);
          return note.mouseenter(function() {
            instrumentDiv.addClass("hovered").siblings(".hovered").removeClass("hovered");
            return true;
          }).mouseleave(function() {
            instrumentDiv.removeClass("hovered");
            return true;
          }).click(function() {
            self.toggleNote(idx, i);
            if (self.noteIsActive(idx, i)) {
              note.addClass("active");
            } else {
              note.removeClass("active");
            }
            return true;
          });
        };
        for (i = k = 0, ref2 = col.length - 1; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
          note = col[i];
          note = $("<div class='instrument note" + (note != null ? " active" : "") + "' />");
          fn(i, note, idx);
          column.append(note);
        }
        div.append(column);
      }
      div.append("<div class='clear' />");
      if (firstDraw) {
        this.div = div;
      }
      return this;
    };

    Measure.prototype.remove = function() {
      this.drumMachine.removeMeasure(this);
      return this;
    };

    Measure.prototype.toggleNote = function(x, y) {
      if (this.data[x][y] instanceof App.Instrument) {
        this.data[x][y] = null;
      } else {
        this.data[x][y] = this.instruments[y];
      }
      return this;
    };

    Measure.prototype.noteIsActive = function(x, y) {
      return this.data[x][y] instanceof App.Instrument;
    };

    Measure.prototype.getDiv = function() {
      return this.div;
    };

    Measure.prototype.getNextColumn = function(activeNotes, cycle) {
      if (activeNotes == null) {
        activeNotes = true;
      }
      if (cycle == null) {
        cycle = false;
      }
      if (this.noteIndex === this.data.length - 1) {
        if (!cycle) {
          return this.getColumnAtIndex(activeNotes, -1);
        } else {
          this.noteIndex = 0;
        }
      } else {
        this.noteIndex += this.stepSize;
      }
      return this.getCurrentColumn(activeNotes);
    };

    Measure.prototype.resetPosition = function() {
      this.noteIndex = 0;
      return this;
    };

    Measure.prototype.getCurrentColumn = function(activeNotes) {
      if (activeNotes == null) {
        activeNotes = true;
      }
      return this.getColumnAtIndex(activeNotes, this.noteIndex);
    };

    Measure.prototype.getColumnAtIndex = function(activeNotes, idx) {
      var instrument;
      if (idx < 0 || idx >= this.data.length) {
        return null;
      }
      if (activeNotes === true) {
        return (function() {
          var j, len, ref, results;
          ref = this.data[idx];
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            instrument = ref[j];
            if (instrument != null) {
              results.push(instrument);
            }
          }
          return results;
        }).call(this);
      }
      return this.data[idx];
    };

    Measure.prototype.getIntervalDelay = function() {
      return ((this.timeSignature[0] * 60000) / this.bpm) / this.getVisibleLength();
    };

    Measure.prototype.getColumnDivs = function() {
      return this.div.find(".column");
    };

    Measure.prototype.getCurrentColumnDiv = function() {
      return this.getColumnDivs().eq(this.noteIndex / this.stepSize);
    };

    Measure.prototype.addInstumentToData = function(instrument) {
      var col, j, len, ref;
      ref = this.data;
      for (j = 0, len = ref.length; j < len; j++) {
        col = ref[j];
        col.push(null);
      }
      return this;
    };

    Measure.prototype.removeInstrumentFromData = function(index) {
      var col, j, len, ref;
      ref = this.data;
      for (j = 0, len = ref.length; j < len; j++) {
        col = ref[j];
        col.splice(index, 1);
      }
      return this;
    };

    Measure.prototype.serialize = function() {
      var col, data, j, k, len, len1, note, ref, temp;
      data = [];
      ref = this.data;
      for (j = 0, len = ref.length; j < len; j++) {
        col = ref[j];
        temp = [];
        for (k = 0, len1 = col.length; k < len1; k++) {
          note = col[k];
          if (note != null) {
            temp.push(1);
          } else {
            temp.push(0);
          }
        }
        data.push(temp);
      }
      return {
        beats: this.timeSignature[0],
        bpm: this.bpm,
        data: data
      };
    };

    Measure.prototype.setBPM = function(bpm) {
      if ((1 <= bpm && bpm <= App.Measure.maxBPM)) {
        this.bpm = Math.floor(bpm);
      } else {
        this.bpm = 120;
      }
      return this;
    };

    Measure.prototype.setStepSize = function(stepSize) {
      if (indexOf.call(STEPSIZES, stepSize) >= 0) {
        this.stepSize = stepSize;
      } else {
        this.stepSize = 2;
      }
      return this;
    };

    return Measure;

  })();

  App.Part = (function() {
    Part["new"] = function() {
      var container, drumMachine, params, str, subClassName;
      subClassName = arguments[0], drumMachine = arguments[1], container = arguments[2], params = 4 <= arguments.length ? slice.call(arguments, 3) : [];
      str = subClassName[0].toLowerCase() + subClassName.slice(1);
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(App["Part" + subClassName], [drumMachine, container, str, str].concat(slice.call(params)), function(){});
    };

    function Part(drumMachine, container, className, id) {
      this.drumMachine = drumMachine;
      this.container = container;
      this.className = className;
      this.id = id;
      this.svg = null;
    }

    Part.prototype.makeContainer = function(x, y, width, height) {
      if (this.svg != null) {
        this.container.select("." + this.className).remove();
      }
      return this.container.append("g").attr("id", this.id).attr("class", this.className).attr("transform", "translate(" + x + "," + y + ")");
    };

    Part.prototype.draw = function() {
      throw new Error("Override this method to implement it!");
    };

    return Part;

  })();

  App.PartInstruments = (function(superClass) {
    extend(PartInstruments, superClass);

    function PartInstruments() {
      return PartInstruments.__super__.constructor.apply(this, arguments);
    }

    PartInstruments.prototype.draw = function() {
      var drumMachine, fn, group, instrument, instrumentIdx, instrumentName, ref;
      drumMachine = this.drumMachine;
      this.svg = this.makeContainer(10, 10);
      instrumentIdx = 0;
      ref = App.instruments;
      fn = (function(_this) {
        return function(instrumentName, instrument, instrumentIdx) {
          var group, removeButton;
          group = _this.svg.append("g").attr("data-idx", instrumentIdx).style("cursor", "pointer");
          group.append("rect").attr("class", "instrument").attr("data-instrumentname", instrumentName).attr("x", 10).attr("y", instrumentIdx * 60).attr("width", 200).attr("height", 40).attr("rx", 6).attr("ry", 6).style("fill", "transparent").style("stroke", "black").style("stroke-width", 2);
          group.append("text").text(instrumentName).attr("x", 111).attr("y", instrumentIdx * 60 + 26).style("text-anchor", "middle");
          group.append("text").attr("class", "checkmark").text("✓").attr("x", 192).attr("y", instrumentIdx * 60 + 26).style("text-anchor", "middle").style("display", "none");
          removeButton = group.append("g").classed("remove", true).attr("transform", "translate(200, " + (instrumentIdx * 60 - 5) + ")").style("display", "none");
          removeButton.append("circle").attr("r", 8).attr("cx", 8).attr("cy", 8).style("fill", "black").style("stroke", "black").style("stroke-width", 2);
          removeButton.append("text").html("&times;").attr("x", 8).attr("y", 13).style("fill", "white").style("text-anchor", "middle");
          removeButton.on("click", function() {
            console.log(d3.event);
            d3.event.stopPropagation();
            return false;
          });
          group.on("click", function() {
            var checkmark, rect;
            group = d3.select(this);
            rect = group.select(".instrument");
            checkmark = group.select(".checkmark");
            if (checkmark.style("display") === "none") {
              checkmark.style("display", "block");
            } else {
              checkmark.style("display", "none");
            }
            if (rect.style("fill") === "transparent") {
              rect.style("fill", "lightgray");
            } else {
              rect.style("fill", "transparent");
            }
            return true;
          }).on("mouseenter", function() {
            d3.select(this).select(".remove").style("display", "block");
            return true;
          }).on("mouseleave", function() {
            d3.select(this).select(".remove").style("display", "none");
            return true;
          });
          return instrument.svg = group;
        };
      })(this);
      for (instrumentName in ref) {
        instrument = ref[instrumentName];
        fn(instrumentName, instrument, instrumentIdx);
        instrumentIdx++;
      }
      group = this.svg.append("g").attr("data-idx", instrumentIdx).style("cursor", "pointer");
      group.append("rect").attr("class", "instrument").attr("x", 10).attr("y", instrumentIdx * 60).attr("width", 200).attr("height", 40).attr("rx", 6).attr("ry", 6).style("fill", "transparent").style("stroke", "black").style("stroke-width", 2);
      group.append("text").text("Add instrument...").attr("x", 111).attr("y", instrumentIdx * 60 + 26).style("text-anchor", "middle");
      instrument.svg = group;
      console.log("drumkits done");
      return this;
    };

    return PartInstruments;

  })(App.Part);

  App.PartImportExport = (function(superClass) {
    extend(PartImportExport, superClass);

    function PartImportExport(master, container, className, id) {
      PartImportExport.__super__.constructor.call(this, master, container, className, id);
      this._div = null;
      this._text = "";
    }

    PartImportExport.prototype.draw = function() {
      var div, firstDraw, master;
      div = this._container.find("." + this._id);
      firstDraw = div.length === 0;
      master = this._master;
      if (firstDraw) {
        div = this.makeContainer().append("<textarea id=\"copyFrom\" class=\"text\" />\n<!--button class=\"copy\" data-clipboard-target=\"copyFrom\" title=\"Click to copy data\">copy</button-->\n<button class=\"import\" title=\"import\">import</button>\n<button class=\"close\" title=\"close popup\">close</button>");
        div.find("button.import").click((function(_this) {
          return function() {
            master["import"]();
            return _this;
          };
        })(this));
        div.find("button.close").click(function() {
          master.hidePopup();
          return this;
        });
        this._div = div;
        master.setPopup(this._div);
        this._container.append(div);
      }
      return this;
    };

    PartImportExport.prototype.getDiv = function() {
      return this._div;
    };

    PartImportExport.prototype.setText = function(text, updateButton) {
      if (updateButton == null) {
        updateButton = true;
      }
      this._text = text;
      if (updateButton === true) {
        this._div.find(".copy").attr("data-clipboard-text", this._text);
      }
      return this;
    };

    return PartImportExport;

  })(App.Part);

  App.PartUsedInstruments = (function(superClass) {
    extend(PartUsedInstruments, superClass);

    PartUsedInstruments["new"] = function(subClassName, drumMachine, container, usedInstruments) {
      var str;
      str = subClassName[0].toLowerCase() + subClassName.slice(1);
      return new App["Part" + subClassName](drumMachine, container, str, str, usedInstruments);
    };

    function PartUsedInstruments(drumMachine, container, className, id, usedInstruments) {
      PartUsedInstruments.__super__.constructor.call(this, drumMachine, container, className, id);
      this.usedInstruments = usedInstruments;
    }

    PartUsedInstruments.prototype.draw = function() {
      var div, drumMachine, group, instrument, instrumentIdx, instrumentName, j, len, ref;
      div = this.container.select("." + this.className);
      drumMachine = this.drumMachine;
      this.svg = this.makeContainer(270, 50);
      instrumentIdx = 0;
      ref = this.usedInstruments;
      for (instrumentIdx = j = 0, len = ref.length; j < len; instrumentIdx = ++j) {
        instrument = ref[instrumentIdx];
        console.log(instrument);
        instrumentName = instrument.name;
        group = this.svg.append("g").attr("data-idx", instrumentIdx).style("cursor", "pointer");
        group.append("rect").attr("class", "instrument").attr("data-instrumentname", instrumentName).attr("x", 10).attr("y", instrumentIdx * 60).attr("width", 200).attr("height", 40).attr("rx", 6).attr("ry", 6).style("fill", "transparent").style("stroke", "black").style("stroke-width", 2);
        group.append("text").text(instrumentName).attr("x", 111).attr("y", instrumentIdx * 60 + 26).style("text-anchor", "middle");
        instrument.svg = group;
        instrumentIdx++;
      }
      console.log("used instruments done");
      return this;
    };

    return PartUsedInstruments;

  })(App.Part);

  App.PartNotes = (function(superClass) {
    extend(PartNotes, superClass);

    function PartNotes() {
      return PartNotes.__super__.constructor.apply(this, arguments);
    }

    PartNotes.prototype.draw = function() {
      var addMeasureBtn, div, druMachine, idx, j, len, mDiv, measure, ref;
      div = this._container.find("." + this._id);
      druMachine = this.drumMachine;
      idx = 0;
      ref = druMachine.getMeasures();
      for (j = 0, len = ref.length; j < len; j++) {
        measure = ref[j];
        mDiv = measure.draw().getDiv();
        mDiv.find(".column").each(function() {
          return $(this).attr("data-absidx", idx++);
        });
        div.append(mDiv);
      }
      addMeasureBtn = $("<button class='addMeasure'>add meausure</button>");
      addMeasureBtn.click(function() {
        druMachine.addMeasure();
        return this;
      });
      div.append(addMeasureBtn);
      if (firstDraw) {
        this._container.append(div);
      }
      return this;
    };

    return PartNotes;

  })(App.Part);

  App.PartPlayButtons = (function(superClass) {
    extend(PartPlayButtons, superClass);

    function PartPlayButtons() {
      return PartPlayButtons.__super__.constructor.apply(this, arguments);
    }

    PartPlayButtons.prototype.draw = function() {
      var drumMachine, group, halfRadius, radius, self;
      self = this;
      drumMachine = this.drumMachine;
      this.svg = this.makeContainer(260, 19);
      radius = 24;
      halfRadius = Math.ceil(radius / 2);
      group = this.svg.append("g").classed("playbutton play", true).attr("transform", "translate(0,0)").style("cursor", "pointer");
      group.append("circle").classed("circle", true).attr("r", radius).attr("cx", halfRadius).attr("cy", halfRadius).style("fill", "transparent").style("stroke", "black").style("stroke-width", 2);
      group.append("text").text("play").attr("x", halfRadius).attr("y", halfRadius + 4).style("text-anchor", "middle");
      group.on("click", function() {
        var textElem;
        textElem = d3.select(this).select("text");
        if (!drumMachine.isPlaying()) {
          textElem.text("pause");
          drumMachine.startPlaying();
        } else {
          textElem.text("play");
          drumMachine.pause();
        }
        return true;
      }).on("mouseenter", function() {
        d3.select(this).select("circle").style("fill", "lightgray");
        return true;
      }).on("mouseleave", function() {
        d3.select(this).select("circle").style("fill", "transparent");
        return true;
      });
      group = this.svg.append("g").classed("playbutton stop", true).attr("transform", "translate(" + (2 * radius + 10) + ",0)").style("cursor", "pointer");
      group.append("circle").classed("circle", true).attr("r", radius).attr("cx", halfRadius).attr("cy", halfRadius).style("fill", "transparent").style("stroke", "black").style("stroke-width", 2);
      group.append("text").text("stop").attr("x", halfRadius).attr("y", halfRadius + 4).style("text-anchor", "middle");
      group.on("click", function() {
        var textElem;
        textElem = d3.select("#" + this.id).select("text");
        textElem.text("play");
        drumMachine.stop();
        return true;
      }).on("mouseenter", function() {
        d3.select(this).select("circle").style("fill", "lightgray");
        return true;
      }).on("mouseleave", function() {
        d3.select(this).select("circle").style("fill", "transparent");
        return true;
      });
      return this;
    };

    return PartPlayButtons;

  })(App.Part);

  App.DrumMachine = (function() {
    DrumMachine["new"] = function(container, instruments) {
      return new App.DrumMachine(container, instruments);
    };

    function DrumMachine(container, instruments, usedInstruments) {
      if (instruments == null) {
        instruments = [];
      }
      if (usedInstruments == null) {
        usedInstruments = [];
      }
      if (container instanceof jQuery) {
        container = container[0];
      }
      this.container = d3.select(container);
      if (instruments instanceof Array) {
        this.instruments = instruments;
      } else {
        this.instruments = [];
      }
      this._measureIdx = 0;
      this._noteIdx = 0;
      this._position = 0;
      this._interval = null;
      this._popup = null;
      this.svg = this.container.append("svg").attr("xmlns", "http://www.w3.org/2000/svg").attr("class", "drumMachine").attr("width", 1000).attr("height", 800);
      this.parts = [App.Part["new"]("Instruments", this, this.svg), App.Part["new"]("PlayButtons", this, this.svg), App.Part["new"]("Notes", this, this.svg, "notes", "notes")];
      this.measures = [];
      this.measures.push(new App.Measure(this, this.instruments, [4, 4], 8, 120));
      this.measures.push(new App.Measure(this, this.instruments, [3, 4], 8, 120));
      console.log(this);
    }

    DrumMachine.prototype.draw = function() {
      var j, len, part, ref;
      ref = this.parts;
      for (j = 0, len = ref.length; j < len; j++) {
        part = ref[j];
        part.draw();
      }
      return this;
    };

    DrumMachine.prototype.drawPartial = function(ignoreList) {
      var drawPart, j, k, len, len1, part, partToIgnore, ref;
      if (!(ignoreList instanceof Array)) {
        ignoreList = [ignoreList];
      }
      ref = this.parts;
      for (j = 0, len = ref.length; j < len; j++) {
        part = ref[j];
        drawPart = true;
        for (k = 0, len1 = ignoreList.length; k < len1; k++) {
          partToIgnore = ignoreList[k];
          if (part instanceof partToIgnore) {
            drawPart = false;
            break;
          }
        }
        if (drawPart) {
          part.draw();
        }
      }
      return this;
    };

    DrumMachine.prototype.showPopup = function() {
      this._popup.fadeIn(200);
      return this;
    };

    DrumMachine.prototype.hidePopup = function() {
      this._popup.fadeOut(200);
      return this;
    };

    DrumMachine.prototype["export"] = function() {
      var instrument, instruments, json, measure, measures;
      instruments = (function() {
        var j, len, ref, results;
        ref = this.instruments;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          instrument = ref[j];
          if (instrument != null) {
            results.push(instrument.serialize());
          }
        }
        return results;
      }).call(this);
      measures = (function() {
        var j, len, ref, results;
        ref = this.measures;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          measure = ref[j];
          results.push(measure.serialize());
        }
        return results;
      }).call(this);
      json = JSON.stringify({
        "instruments": instruments,
        "measures": measures
      });
      this._popup.fadeIn(200).find(".text").val(json);
      return this;
    };

    DrumMachine.prototype["import"] = function() {
      var instrument, instruments, j, json, k, len, len1, makeInstrumentFromKit, measure, measures, newMeasure, temp, transformData;
      json = this._popup.find(".text").val();
      if ((json == null) || json === "") {
        return this;
      }
      json = $.parseJSON(json);
      if ((json == null) || $.isEmptyObject(json)) {
        return this;
      }
      makeInstrumentFromKit = (function(_this) {
        return function(kitName, name, volume) {
          var instrument, path;
          path = _this.drumkits[kitName];
          if ((path != null) && ((instrument = path[name]) != null)) {
            console.log(instrument);
            return instrument;
          }
          return null;
        };
      })(this);
      transformData = function(data, instruments) {
        var col, j, k, len, len1, note, x, y;
        for (x = j = 0, len = data.length; j < len; x = ++j) {
          col = data[x];
          for (y = k = 0, len1 = col.length; k < len1; y = ++k) {
            note = col[y];
            if (note === 0) {
              data[x][y] = null;
            } else {
              data[x][y] = instruments[y];
            }
          }
        }
        return data;
      };
      this.instruments = [];
      this.measures = [];
      instruments = json.instruments;
      measures = json.measures;
      for (j = 0, len = instruments.length; j < len; j++) {
        instrument = instruments[j];
        temp = makeInstrumentFromKit(instrument.kitName, instrument.name, instrument.volume);
        if (temp != null) {
          this.instruments.push(temp);
        }
      }
      this.instruments.push(null);
      for (k = 0, len1 = measures.length; k < len1; k++) {
        measure = measures[k];
        newMeasure = new App.Measure(this, this.instruments, 2, measure.beats, measure.bpm);
        newMeasure.setData(transformData(measure.data, this.instruments));
        this.measures.push(newMeasure);
      }
      this.drawPartial([App.PartDrumkits, App.PartImportExport]);
      this.hidePopup();
      return this;
    };

    DrumMachine.prototype.addInstrument = function(instrument) {
      var j, len, measure, ref;
      if (instrument instanceof App.Instrument) {
        this.instruments.splice(this.instruments.length - 1, 0, instrument);
        ref = this.measures;
        for (j = 0, len = ref.length; j < len; j++) {
          measure = ref[j];
          measure.addInstumentToData(instrument);
        }
        this.drawPartial([App.PartDrumkits, App.PartImportExport]);
      }
      return this;
    };

    DrumMachine.prototype.removeInstrument = function(index) {
      var j, len, measure, ref;
      this.instruments.splice(index, 1);
      ref = this.measures;
      for (j = 0, len = ref.length; j < len; j++) {
        measure = ref[j];
        measure.removeInstrumentFromData(index);
      }
      this.drawPartial([App.PartDrumkits, App.PartImportExport]);
      return this;
    };

    DrumMachine.prototype.addMeasure = function(measure) {
      console.log(this.measures);
      if (measure == null) {
        measure = new App.Measure(this, this.instruments, 2, 4, 120);
      }
      this.measures.push(measure);
      this.draw();
      return this;
    };

    DrumMachine.prototype.removeMeasure = function(measure) {
      var m;
      this.measures = (function() {
        var j, len, ref, results;
        ref = this.measures;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          m = ref[j];
          if (m !== measure) {
            results.push(m);
          }
        }
        return results;
      }).call(this);
      this.draw();
      return this;
    };

    DrumMachine.prototype.getCurrentMeasure = function() {
      return this.measures[this._measureIdx];
    };

    DrumMachine.prototype.nextMeasure = function() {
      var ref;
      if ((0 <= (ref = this._measureIdx) && ref < this.measures.length - 1)) {
        this._measureIdx++;
      } else {
        this._measureIdx = 0;
      }
      return this;
    };

    DrumMachine.prototype.getIntervalDelay = function(measure) {
      if (measure == null) {
        measure = this.getCurrentMeasure();
      }
      return measure.getIntervalDelay();
    };

    DrumMachine.prototype.startPlaying = function() {
      var colDiv, currentColumn, currentMeasure, playColumn, prevDiv;
      currentMeasure = this.getCurrentMeasure();
      currentColumn = currentMeasure.getCurrentColumn();
      colDiv = currentMeasure.getCurrentColumnDiv();
      prevDiv = colDiv.prev();
      playColumn = (function(_this) {
        return function() {
          var instrument, j, len;
          if (prevDiv != null) {
            prevDiv.removeClass("current");
          }
          colDiv.addClass("current");
          for (j = 0, len = currentColumn.length; j < len; j++) {
            instrument = currentColumn[j];
            instrument.getSound().play();
          }
          currentColumn = currentMeasure.getNextColumn();
          prevDiv = colDiv;
          if (currentColumn == null) {
            currentMeasure = _this.nextMeasure().getCurrentMeasure().resetPosition();
            currentColumn = currentMeasure.getCurrentColumn();
            colDiv = currentMeasure.getColumnDivs().eq(0);
            window.clearInterval(_this._interval);
            _this._interval = window.setInterval(playColumn, _this.getIntervalDelay(currentMeasure));
          } else {
            colDiv = colDiv.next();
          }
          return true;
        };
      })(this);
      return this._interval = window.setInterval(playColumn, this.getIntervalDelay(currentMeasure));
    };

    DrumMachine.prototype.pause = function() {
      window.clearInterval(this._interval);
      return this._interval = null;
    };

    DrumMachine.prototype.stop = function() {
      var j, len, measure, ref;
      this.pause();
      ref = this.measures;
      for (j = 0, len = ref.length; j < len; j++) {
        measure = ref[j];
        measure.resetPosition();
      }
      this._measureIdx = 0;
      return this.removeCurrentColumnIndicator();
    };

    DrumMachine.prototype.isPlaying = function() {
      return this._interval != null;
    };

    DrumMachine.prototype.removeCurrentColumnIndicator = function() {
      $(".column.current").removeClass("current");
      return this;
    };

    DrumMachine.prototype.getDrumkits = function() {
      return this.drumkits;
    };

    DrumMachine.prototype.getInstruments = function() {
      return this.instruments;
    };

    DrumMachine.prototype.getMeasures = function() {
      return this.measures;
    };

    DrumMachine.prototype.setPopup = function(div) {
      this._popup = div;
      return this;
    };

    return DrumMachine;

  })();

  $(document).ready(function() {
    var makeInstruments;
    makeInstruments = function(instruments) {
      var instrumentName, instrumentPath, res;
      res = {};
      for (instrumentName in instruments) {
        instrumentPath = instruments[instrumentName];
        res[instrumentName] = new App.Instrument(instrumentName, instrumentPath, 80);
      }
      return res;
    };
    return soundManager.setup({
      url: "includes/swf/",
      onready: function() {
        var dm, start, timer;
        console.log("soundmanager is ready");
        timer = performance || Date;
        start = timer.now();
        App.instruments = makeInstruments(App.instruments);
        dm = new App.DrumMachine(document.body, App.instruments, [App.instruments["Hihat Default"], App.instruments["High tom"], App.instruments["Mid tom"], App.instruments["Snare Default"], App.instruments["Low tom"], App.instruments["Bass Kick Default"]]);
        dm.draw();
        window.dm = dm;
        return console.log("time to create drum machine was " + (timer.now() - start) + " ms");
      }
    });
  });

}).call(this);
