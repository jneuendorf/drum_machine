// Generated by CoffeeScript 1.9.3
(function() {
  var isNumber,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.DM = {};

  DM.Utils = {
    arrayDiff: function(arr1, arr2) {
      var elem1, idx, j, len, res;
      res = {
        added: [],
        removed: [],
        equal: []
      };
      arr1 = arr1.slice(0);
      arr2 = arr2.slice(0);
      for (j = 0, len = arr1.length; j < len; j++) {
        elem1 = arr1[j];
        idx = arr2.indexOf(elem1);
        if (idx >= 0) {
          res.equal.push(elem1);
          arr2.splice(idx, 1);
        } else if (idx === -1) {
          res.removed.push(elem1);
        }
      }
      res.added = arr2;
      return res;
    },
    getInstrumentAbbreviation: function(instrumentName) {
      var j, len, res, word, words;
      words = instrumentName.split(" ");
      res = "";
      for (j = 0, len = words.length; j < len; j++) {
        word = words[j];
        if (isNaN(parseInt(word, 10))) {
          res += word.charAt(0).toUpperCase();
        }
      }
      return res;
    }
  };

  isNumber = function(n) {
    if (n instanceof Number) {
      n = n.valueOf();
    }
    return typeof n === "number" && !isNaN(n) && isFinite(n);
  };

  DM.Instrument = (function() {
    var count;

    count = 0;

    Instrument.getID = function() {
      return "instrument" + (count++);
    };

    function Instrument(name, pathToSound, volume) {
      if (volume == null) {
        volume = 0.5;
      }
      this.name = name;
      this.sound = new Howl({
        src: [pathToSound],
        preload: true,
        volume: volume
      });
    }

    Instrument.prototype.generateID = function() {
      return DM.Instrument.getID();
    };

    Instrument.prototype.serialize = function() {
      return {
        name: this.name,
        volume: this.sound.volume
      };
    };

    return Instrument;

  })();

  DM.Measure = (function() {
    var MAX_BEATS, MAX_BPM, MAX_NOTE_VALUE, MODES, MODE_NAMES, STEPSIZES, count;

    Measure.MAX_BPM = 240;

    MAX_BPM = Measure.MAX_BPM;

    Measure.MAX_BEATS = 20;

    MAX_BEATS = Measure.MAX_BEATS;

    Measure.MAX_NOTE_VALUE = 64;

    MAX_NOTE_VALUE = Measure.MAX_NOTE_VALUE;

    Measure.STEPSIZES = [64, 32, 16, 8, 4, 2, 1];

    Measure.MODES = [1, 2, 4, 8, 16, 32, 64];

    Measure.MODES.LAST = 64;

    Measure.MODE_NAMES = ["whole", "half", "quarter", "8th", "16th", "32nd", "64th"];

    MODES = Measure.MODES;

    MODE_NAMES = Measure.MODE_NAMES;

    STEPSIZES = Measure.STEPSIZES;

    count = 0;

    Measure.getID = function() {
      return "measure" + count++;
    };

    function Measure(drumMachine, timeSignature, mode, bpm) {
      var data, dataLength, i, idx, instrument, j, len, ref;
      this.drumMachine = drumMachine;
      this.beats = timeSignature[0], this.noteValue = timeSignature[1];
      this.bpm = bpm;
      this.instruments = drumMachine.parts.instruments.used;
      this.svg = null;
      this.noteIndex = 0;
      this.id = DM.Measure.getID();
      this.container = null;
      this.x = null;
      this.y = null;
      this.drawDot = null;
      idx = MODES.indexOf(mode);
      if (idx < 0) {
        idx = 3;
      }
      this.mode = MODES[idx];
      data = {};
      dataLength = this._maxNumNotes();
      ref = this.instruments;
      for (j = 0, len = ref.length; j < len; j++) {
        instrument = ref[j];
        data[instrument] = (function() {
          var k, ref1, results;
          results = [];
          for (i = k = 0, ref1 = dataLength; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
            results.push(false);
          }
          return results;
        })();
      }
      this.data = data;
      Object.defineProperty(this, "dataLength", {
        get: function() {
          var keys;
          keys = Object.keys(this.data);
          return this.data[keys[0]].length;
        },
        set: function() {
          console.warn("Cannnot set DM.Measure::dataLength!");
          return this;
        }
      });
    }

    Measure.prototype._maxNumNotes = function() {
      return (this.mode / this.noteValue) * this.beats;
    };

    Measure.prototype.addInstruments = function() {
      var data, i, instrumentName, instrumentNames, j, len, measureLength;
      instrumentNames = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      console.log("DM.Measure::addInstruments: adding instruments", instrumentNames);
      data = this.data;
      measureLength = this._maxNumNotes();
      for (j = 0, len = instrumentNames.length; j < len; j++) {
        instrumentName = instrumentNames[j];
        data[instrumentName] = (function() {
          var k, ref, results;
          results = [];
          for (i = k = 0, ref = measureLength; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
            results.push(false);
          }
          return results;
        })();
      }
      return this;
    };

    Measure.prototype.removeInstruments = function() {
      var instrumentName, instrumentNames, j, len;
      instrumentNames = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      console.log("DM.Measure::removeInstruments: removing instruments", instrumentNames);
      for (j = 0, len = instrumentNames.length; j < len; j++) {
        instrumentName = instrumentNames[j];
        delete this.data[instrumentName];
      }
      return this;
    };

    Measure.prototype._updateMusicValues = function(bpm, beats, noteValue, mode) {
      var data, dataLength, i, instrument, j, len, ref;
      if (beats < this.beats) {
        if (!confirm("Shrinking the measure will result in loss of data!")) {
          return this;
        }
      }
      this.bpm = bpm;
      this.beats = beats;
      this.noteValue = noteValue;
      this.mode = mode;
      data = {};
      dataLength = this._maxNumNotes();
      ref = this.instruments;
      for (j = 0, len = ref.length; j < len; j++) {
        instrument = ref[j];
        data[instrument] = (function() {
          var k, ref1, results;
          results = [];
          for (i = k = 0, ref1 = dataLength; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
            results.push(this.data[instrument][i] || false);
          }
          return results;
        }).call(this);
      }
      this.data = data;
      this.drumMachine.parts.measures.draw();
      return this;
    };

    Measure.prototype.draw = function(container, x, y, drawDot) {
      var drumMachine, group, hSpacing, height, idx, instrumentName, j, lastX, len, note, noteIndex, noteRect, notes, offsetLeft, offsetTop, ref, ref1, row, rowIdx, self, stepSize, vSpacing, width;
      if (container == null) {
        container = this.container;
      }
      if (x == null) {
        x = this.x;
      }
      if (y == null) {
        y = this.y;
      }
      if (drawDot == null) {
        drawDot = this.drawDot || false;
      }
      self = this;
      drumMachine = this.drumMachine;
      if (arguments.length > 0) {
        this.container = container;
        this.x = x;
        this.y = y;
        this.drawDot = drawDot;
      }
      hSpacing = 10;
      vSpacing = 10;
      width = 30;
      height = 30;
      offsetTop = 35;
      offsetLeft = 30;
      group = container.append("g").classed("measure", true).attr("transform", "translate(" + x + "," + y + ")");
      this.svg = group;
      if (drawDot) {
        this.appendDot();
      }
      stepSize = Math.ceil(this.dataLength / this.mode);
      this.stepSize = stepSize;
      rowIdx = 0;
      ref = this.data;
      for (instrumentName in ref) {
        notes = ref[instrumentName];
        row = group.append("g").classed("row", true).attr("transform", "translate(" + offsetLeft + " ," + (rowIdx * (height + vSpacing) + offsetTop) + ")");
        group.append("text").text(DM.Utils.getInstrumentAbbreviation(instrumentName)).attr("x", 15).attr("y", rowIdx * (height + vSpacing) + offsetTop + 20).style("text-anchor", "middle");
        noteIndex = 0;
        lastX = 0;
        ref1 = stepSize;
        for ((ref1 > 0 ? (idx = j = 0, len = notes.length) : idx = j = notes.length - 1); ref1 > 0 ? j < len : j >= 0; idx = j += ref1) {
          note = notes[idx];
          lastX = noteIndex * (width + hSpacing);
          noteRect = row.append("rect").classed("note", true).classed("active", note).attr("x", lastX).attr("y", 0).attr("width", width).attr("height", height).attr("stroke", "black").attr("stroke-width", 1).attr("rx", 3).attr("ry", 3);
          noteRect.on("click", (function(noteRect, instrumentName, noteIndex) {
            return function() {
              if (self.toggleNote(instrumentName, noteIndex) === true) {
                noteRect.classed("active", true);
              } else {
                noteRect.classed("active", false);
              }
              return true;
            };
          })(noteRect, instrumentName, noteIndex));
          noteIndex++;
        }
        rowIdx++;
      }
      group.append("text").classed("bpm", true).text(this.bpm + " BPM").attr("x", 0).attr("y", 10);
      group.append("text").classed("timeSignature", true).text("(" + this.beats + "/" + this.noteValue + ") time").attr("x", 100).attr("y", 10);
      group.append("text").classed("edit", true).text("âš™").attr("x", lastX + width + 15).attr("y", 10).style("cursor", "pointer").style("text-anchor", "middle").on("click", function() {
        var div;
        div = drumMachine.popup.find(".content");
        div.empty().append(self.popupContent());
        drumMachine.showPopup(function() {
          var beats, bpm, data, mode, noteValue;
          data = div.find(".data");
          bpm = parseInt(data.filter(".bpm").val(), 10);
          beats = parseInt(data.filter(".beats").val(), 10);
          noteValue = parseInt(data.filter(".noteValue").val(), 10);
          mode = parseInt(data.filter(".mode").val(), 10);
          if (!isNaN(bpm) && !isNaN(beats) && !isNaN(noteValue) && !isNaN(mode)) {
            self._updateMusicValues(bpm, beats, noteValue, mode);
            return true;
          }
          return false;
        });
        return true;
      });
      return {
        width: lastX + width,
        height: rowIdx * height + offsetTop + hSpacing * rowIdx
      };
    };

    Measure.prototype.popupContent = function() {
      var drumMachine, idx, mode, res;
      drumMachine = this.drumMachine;
      res = $("<div>\n    <div>\n        <span style=\"display:inline-block; width: 100px;\">BPM:</span>\n        <input class=\"data bpm\" type=\"number\" min=\"1\" max=\"" + MAX_BPM + "\" value=\"" + this.bpm + "\" />\n    </div>\n    <div>\n        <span style=\"display:inline-block; width: 100px;\">beats:</span>\n        <input class=\"data beats\" type=\"number\" min=\"1\" max=\"" + MAX_BEATS + "\" value=\"" + this.beats + "\" />\n    </div>\n    <div>\n        <span style=\"display:inline-block; width: 100px;\">note value:</span>\n        <input class=\"data noteValue\" type=\"number\" min=\"1\" max=\"" + MAX_NOTE_VALUE + "\" value=\"" + this.noteValue + "\" />\n    </div>\n    <div>\n        <select class=\"data mode\">\n            " + ((function() {
        var j, len, results;
        results = [];
        for (idx = j = 0, len = MODES.length; j < len; idx = ++j) {
          mode = MODES[idx];
          results.push("<option value=\"" + mode + "\"" + (mode === this.mode ? " selected" : "") + ">" + MODE_NAMES[idx] + "</option>");
        }
        return results;
      }).call(this)) + "\n        </select>\n    </div>\n    <button>OK</button>\n</div>");
      res.find("button").click(function() {
        drumMachine.hidePopup();
        return true;
      });
      return res;
    };

    Measure.prototype.appendDot = function() {
      var height, offsetLeft, offsetTop, width;
      width = 30;
      height = 30;
      offsetTop = 35;
      offsetLeft = 30;
      this.svg.append("circle").classed("dot", true).attr("r", 4).attr("cx", offsetLeft + width / 2).attr("cy", offsetTop / 2 + 8).style("fill", "black");
      return this;
    };

    Measure.prototype.moveDot = function(duration) {
      var dot, hSpacing, height, noteIndex, offsetLeft, offsetTop, vSpacing, width;
      noteIndex = this.noteIndex;
      hSpacing = 10;
      vSpacing = 10;
      width = 30;
      height = 30;
      offsetTop = 35;
      offsetLeft = 30;
      dot = this.svg.select(".dot");
      dot.transition().attr("cx", parseInt(dot.attr("cx"), 10) + width + hSpacing).duration(duration);
      return this;
    };

    Measure.prototype.removeDot = function() {
      this.svg.select(".dot").remove();
      return this;
    };

    Measure.prototype.remove = function() {
      this.drumMachine.removeMeasure(this);
      return this;
    };

    Measure.prototype.toggleNote = function(instrumentName, noteIndex) {
      var notes;
      notes = this.data[instrumentName];
      if (notes[noteIndex] === false) {
        notes[noteIndex] = true;
        return true;
      }
      notes[noteIndex] = false;
      return false;
    };

    Measure.prototype.noteIsActive = function(instrumentName, noteIndex) {
      return this.data[instrumentName][noteIndex] === true;
    };

    Measure.prototype.getNextColumn = function(activeNotes, cycle) {
      if (activeNotes == null) {
        activeNotes = true;
      }
      if (cycle == null) {
        cycle = false;
      }
      if (this.noteIndex === this.data.length - 1) {
        if (!cycle) {
          return this.getColumnAtIndex(activeNotes, -1);
        } else {
          this.noteIndex = 0;
        }
      } else {
        this.noteIndex += this.stepSize;
      }
      return this.getCurrentColumn(activeNotes);
    };

    Measure.prototype.resetPosition = function() {
      this.noteIndex = 0;
      return this;
    };

    Measure.prototype.getCurrentColumn = function(activeNotes) {
      if (activeNotes == null) {
        activeNotes = true;
      }
      return this.getColumnAtIndex(activeNotes, this.noteIndex);
    };

    Measure.prototype.getColumnAtIndex = function(activeNotes, idx) {
      var instrument;
      if (idx < 0 || idx >= this.data.length) {
        return null;
      }
      if (activeNotes === true) {
        return (function() {
          var j, len, ref, results;
          ref = this.data[idx];
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            instrument = ref[j];
            if (instrument != null) {
              results.push(instrument);
            }
          }
          return results;
        }).call(this);
      }
      return this.data[idx];
    };

    Measure.prototype.getDelay = function() {
      var visibleLength;
      visibleLength = this.dataLength / this.stepSize;
      return ((this.beats * 60000) / this.bpm) / visibleLength;
    };

    Measure.prototype.getColumnDivs = function() {
      return this.div.find(".column");
    };

    Measure.prototype.getCurrentColumnDiv = function() {
      return this.getColumnDivs().eq(this.noteIndex / this.stepSize);
    };

    Measure.prototype.serialize = function() {
      var col, data, j, k, len, len1, note, ref, temp;
      data = [];
      ref = this.data;
      for (j = 0, len = ref.length; j < len; j++) {
        col = ref[j];
        temp = [];
        for (k = 0, len1 = col.length; k < len1; k++) {
          note = col[k];
          if (note != null) {
            temp.push(1);
          } else {
            temp.push(0);
          }
        }
        data.push(temp);
      }
      return {
        beats: this.timeSignature[0],
        bpm: this.bpm,
        data: data
      };
    };

    return Measure;

  })();

  DM.Part = (function() {
    Part["new"] = function() {
      var container, drumMachine, params, str, subClassName;
      subClassName = arguments[0], drumMachine = arguments[1], container = arguments[2], params = 4 <= arguments.length ? slice.call(arguments, 3) : [];
      str = subClassName[0].toLowerCase() + subClassName.slice(1);
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(DM["Part" + subClassName], [drumMachine, container, str, str].concat(slice.call(params)), function(){});
    };

    function Part(drumMachine, container, className, id) {
      this.drumMachine = drumMachine;
      this.container = container;
      this.className = className;
      this.id = id;
      this.svg = null;
    }

    Part.prototype.makeContainer = function(x, y) {
      if (this.svg != null) {
        this.svg.remove();
      }
      return this.svg = this.container.append("g").attr("id", this.id).attr("class", this.className).attr("transform", "translate(" + x + "," + y + ")");
    };

    Part.prototype.draw = function() {
      throw new Error("Override this method to implement it!");
    };

    return Part;

  })();

  DM.PartInstruments = (function(superClass) {
    extend(PartInstruments, superClass);

    function PartInstruments(drumMachine, container, className, id) {
      PartInstruments.__super__.constructor.call(this, drumMachine, container, className, id);
      this.instruments = [];
      this._used = [];
      Object.defineProperty(this, "used", {
        get: function() {
          return this._used;
        },
        set: function(arr) {
          var elem, idx, j, len;
          if (arr instanceof Array) {
            this._used.length = arr.length;
            for (idx = j = 0, len = arr.length; j < len; idx = ++j) {
              elem = arr[idx];
              this._used[idx] = elem;
            }
          }
          return this;
        }
      });
    }

    PartInstruments.prototype.draw = function() {
      var drumKit, drumMachine, drumkitName, fn, group, instrument, instrumentIdx, instrumentName, ref, self;
      self = this;
      drumMachine = this.drumMachine;
      this.instruments = DM.instruments;
      this.svg = this.makeContainer(10, 10);
      instrumentIdx = 0;
      ref = drumMachine.loader.sprites;
      for (drumkitName in ref) {
        drumKit = ref[drumkitName];
        fn = (function(_this) {
          return function(instrumentName, instrument, instrumentIdx) {
            var group, removeButton;
            group = _this.svg.append("g").classed("instrumentButton", true).attr("data-idx", instrumentIdx).style("cursor", "pointer");
            group.append("rect").attr("class", "instrument").attr("data-instrumentname", instrumentName).attr("x", 10).attr("y", instrumentIdx * 60).attr("width", 200).attr("height", 40).attr("rx", 6).attr("ry", 6).style("stroke", "black").style("stroke-width", 2);
            group.append("text").text(instrumentName).attr("x", 111).attr("y", instrumentIdx * 60 + 26).style("text-anchor", "middle");
            group.append("text").attr("class", "checkmark").text("âœ“").attr("x", 192).attr("y", instrumentIdx * 60 + 26).style("text-anchor", "middle");
            removeButton = group.append("g").classed("remove", true).attr("transform", "translate(200, " + (instrumentIdx * 60 - 5) + ")").style("display", "none");
            removeButton.append("circle").attr("r", 8).attr("cx", 8).attr("cy", 8).style("fill", "black").style("stroke", "black").style("stroke-width", 2);
            removeButton.append("text").html("&times;").attr("x", 8).attr("y", 13).style("fill", "white").style("text-anchor", "middle");
            removeButton.on("click", function() {
              d3.event.stopPropagation();
              if (confirm("This deletes the instrument permanently for this session. Sure??")) {
                drumMachine.removeInstrument(instrument);
              }
              return false;
            });
            group.on("click", function() {
              var i;
              group = d3.select(this);
              if (indexOf.call(self.used, instrumentName) < 0) {
                self.used.push(instrumentName);
                group.classed("clicked", true);
                drumMachine.addInstrumentsToMeasures(instrumentName);
              } else {
                self.used = (function() {
                  var j, len, ref1, results;
                  ref1 = self.used;
                  results = [];
                  for (j = 0, len = ref1.length; j < len; j++) {
                    i = ref1[j];
                    if (i !== instrumentName) {
                      results.push(i);
                    }
                  }
                  return results;
                })();
                group.classed("clicked", false);
                drumMachine.removeInstrumentsFromMeasures(instrumentName);
              }
              console.log(self.used);
              return true;
            }).on("mouseenter", function() {
              d3.select(this).select(".remove").style("display", "block");
              return true;
            }).on("mouseleave", function() {
              d3.select(this).select(".remove").style("display", "none");
              return true;
            });
            if (indexOf.call(_this.used, instrumentName) >= 0) {
              group.classed("clicked", true);
            }
            return instrument.svg = group;
          };
        })(this);
        for (instrumentName in drumKit) {
          instrument = drumKit[instrumentName];
          fn(instrumentName, instrument, instrumentIdx);
          instrumentIdx++;
        }
      }
      group = this.svg.append("g").attr("data-idx", instrumentIdx).style("cursor", "pointer");
      group.append("rect").attr("class", "instrument").attr("x", 10).attr("y", instrumentIdx * 60).attr("width", 200).attr("height", 40).attr("rx", 6).attr("ry", 6).style("fill", "transparent").style("stroke", "black").style("stroke-width", 2);
      group.append("text").text("Add instrument...").attr("x", 111).attr("y", instrumentIdx * 60 + 26).style("text-anchor", "middle");
      console.log("drumkits done");
      return this;
    };

    return PartInstruments;

  })(DM.Part);

  DM.PartIO = (function(superClass) {
    extend(PartIO, superClass);

    function PartIO(drumMachine, container, className, id) {
      PartIO.__super__.constructor.call(this, drumMachine, container, className, id);
      this.text = null;
    }

    PartIO.prototype.draw = function() {
      var drumMachine, group, halfRadius, offset, radius, textLength;
      drumMachine = this.drumMachine;
      this.svg = this.makeContainer(400, 19);
      radius = 24;
      halfRadius = Math.ceil(radius / 2);
      offset = 0;
      textLength = 100;
      this.svg.append("text").text("Export as:").attr("x", offset).attr("y", radius - 8);
      group = this.svg.append("g").classed("ioButton export", true).attr("transform", "translate(" + (offset + textLength) + ",0)").style("cursor", "pointer");
      group.append("circle").classed("circle", true).attr("r", radius).attr("cx", halfRadius).attr("cy", halfRadius).style("fill", "transparent").style("stroke", "black").style("stroke-width", 2);
      group.append("text").text("TXT").attr("x", halfRadius).attr("y", halfRadius + 4).style("text-anchor", "middle");
      group.on("click", function() {
        console.log("export to text file");
        return true;
      }).on("mouseenter", function() {
        d3.select(this).select("circle").style("fill", "lightgray");
        return true;
      }).on("mouseleave", function() {
        d3.select(this).select("circle").style("fill", "transparent");
        return true;
      });
      group = this.svg.append("g").classed("ioButton stop", true).attr("transform", "translate(" + (offset + textLength + 2 * radius + 10) + ",0)").style("cursor", "pointer");
      group.append("circle").classed("circle", true).attr("r", radius).attr("cx", halfRadius).attr("cy", halfRadius).style("fill", "transparent").style("stroke", "black").style("stroke-width", 2);
      group.append("text").text("JSON").attr("x", halfRadius).attr("y", halfRadius + 4).style("text-anchor", "middle");
      group.on("click", function() {
        console.log("export to json");
        return true;
      }).on("mouseenter", function() {
        d3.select(this).select("circle").style("fill", "lightgray");
        return true;
      }).on("mouseleave", function() {
        d3.select(this).select("circle").style("fill", "transparent");
        return true;
      });
      offset += 4 * radius + textLength + 50;
      textLength = 120;
      this.svg.append("text").text("Import from:").attr("x", offset).attr("y", radius - 8);
      group = this.svg.append("g").classed("ioButton export", true).attr("transform", "translate(" + (offset + textLength) + ",0)").style("cursor", "pointer");
      group.append("circle").classed("circle", true).attr("r", radius).attr("cx", halfRadius).attr("cy", halfRadius).style("fill", "transparent").style("stroke", "black").style("stroke-width", 2);
      group.append("text").text("TXT").attr("x", halfRadius).attr("y", halfRadius + 4).style("text-anchor", "middle");
      group.on("click", function() {
        console.log("import from text file");
        return true;
      }).on("mouseenter", function() {
        d3.select(this).select("circle").style("fill", "lightgray");
        return true;
      }).on("mouseleave", function() {
        d3.select(this).select("circle").style("fill", "transparent");
        return true;
      });
      group = this.svg.append("g").classed("ioButton stop", true).attr("transform", "translate(" + (offset + textLength + 2 * radius + 10) + ",0)").style("cursor", "pointer");
      group.append("circle").classed("circle", true).attr("r", radius).attr("cx", halfRadius).attr("cy", halfRadius).style("fill", "transparent").style("stroke", "black").style("stroke-width", 2);
      group.append("text").text("JSON").attr("x", halfRadius).attr("y", halfRadius + 4).style("text-anchor", "middle");
      group.on("click", function() {
        console.log("import from json");
        return true;
      }).on("mouseenter", function() {
        d3.select(this).select("circle").style("fill", "lightgray");
        return true;
      }).on("mouseleave", function() {
        d3.select(this).select("circle").style("fill", "transparent");
        return true;
      });
      return this;
    };

    PartIO.prototype["import"] = function() {};

    PartIO.prototype["export"] = function() {};

    return PartIO;

  })(DM.Part);

  DM.PartMeasures = (function(superClass) {
    extend(PartMeasures, superClass);

    function PartMeasures() {
      return PartMeasures.__super__.constructor.apply(this, arguments);
    }

    PartMeasures.prototype.draw = function() {
      var drumMachine, index, info, j, len, measure, ref, x, y;
      drumMachine = this.drumMachine;
      this.svg = this.makeContainer(260, 70);
      x = 0;
      y = 0;
      ref = drumMachine.measures;
      for (index = j = 0, len = ref.length; j < len; index = ++j) {
        measure = ref[index];
        info = measure.draw(this.svg, x, y, index === 0);
        y = info.height + 20;
      }
      return this;
    };

    return PartMeasures;

  })(DM.Part);

  DM.PartPlayButtons = (function(superClass) {
    extend(PartPlayButtons, superClass);

    function PartPlayButtons() {
      return PartPlayButtons.__super__.constructor.apply(this, arguments);
    }

    PartPlayButtons.prototype.draw = function() {
      var drumMachine, group, halfRadius, radius, self;
      self = this;
      drumMachine = this.drumMachine;
      this.svg = this.makeContainer(260, 19);
      radius = 24;
      halfRadius = Math.ceil(radius / 2);
      group = this.svg.append("g").classed("playbutton play", true).attr("transform", "translate(0,0)").style("cursor", "pointer");
      group.append("circle").classed("circle", true).attr("r", radius).attr("cx", halfRadius).attr("cy", halfRadius).style("fill", "transparent").style("stroke", "black").style("stroke-width", 2);
      group.append("text").text("play").attr("x", halfRadius).attr("y", halfRadius + 4).style("text-anchor", "middle");
      group.on("click", function() {
        var textElem;
        textElem = d3.select(this).select("text");
        if (!drumMachine.isPlaying()) {
          textElem.text("pause");
          drumMachine.startPlaying();
        } else {
          textElem.text("play");
          drumMachine.pause();
        }
        return true;
      }).on("mouseenter", function() {
        d3.select(this).select("circle").style("fill", "lightgray");
        return true;
      }).on("mouseleave", function() {
        d3.select(this).select("circle").style("fill", "transparent");
        return true;
      });
      group = this.svg.append("g").classed("playbutton stop", true).attr("transform", "translate(" + (2 * radius + 10) + ",0)").style("cursor", "pointer");
      group.append("circle").classed("circle", true).attr("r", radius).attr("cx", halfRadius).attr("cy", halfRadius).style("fill", "transparent").style("stroke", "black").style("stroke-width", 2);
      group.append("text").text("stop").attr("x", halfRadius).attr("y", halfRadius + 4).style("text-anchor", "middle");
      group.on("click", function() {
        var textElem;
        textElem = d3.select("#" + this.id).select("text");
        textElem.text("play");
        drumMachine.stop();
        return true;
      }).on("mouseenter", function() {
        d3.select(this).select("circle").style("fill", "lightgray");
        return true;
      }).on("mouseleave", function() {
        d3.select(this).select("circle").style("fill", "transparent");
        return true;
      });
      return this;
    };

    return PartPlayButtons;

  })(DM.Part);

  DM.SpriteLoader = (function() {
    var SPRITES;

    SpriteLoader.SPRITES = [
      {
        path: "kit_sprites/",
        json: "rock-drumkit.howler2.json",
        name: "rock-drumkit"
      }
    ];

    SPRITES = SpriteLoader.SPRITES;

    function SpriteLoader() {
      this.drumkits = {};
      this.sprites = [];
    }

    SpriteLoader.prototype.load = function(callback) {
      var done, drumkits, idx, j, len, numSprites, results, self, sprite, sprites;
      self = this;
      drumkits = this.drumkits;
      sprites = this.sprites;
      done = 0;
      numSprites = SPRITES.length;
      results = [];
      for (idx = j = 0, len = SPRITES.length; j < len; idx = ++j) {
        sprite = SPRITES[idx];
        results.push((function(sprite) {
          return $.getJSON(sprite.path + sprite.json, function(soundSpriteConfig) {
            soundSpriteConfig = self.modConfig(sprite, soundSpriteConfig);
            sprites.push(soundSpriteConfig.sprite);
            drumkits[sprite.name] = new Howl(soundSpriteConfig);
            if (++done === numSprites) {
              if (typeof callback === "function") {
                callback();
              }
            }
            return true;
          });
        })(sprite));
      }
      return results;
    };

    SpriteLoader.prototype.modConfig = function(sprite, config) {
      var idx, j, len, ref, src;
      config.volume = 0.7;
      config.preload = true;
      ref = config.src;
      for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
        src = ref[idx];
        config.src[idx] = sprite.path + src;
      }
      return config;
    };

    return SpriteLoader;

  })();

  DM.DrumMachine = (function() {
    DrumMachine["new"] = function(container, instruments) {
      return new DM.DrumMachine(container, instruments);
    };

    function DrumMachine(container, loader) {
      var jContainer, self;
      if (container instanceof jQuery) {
        container = container[0];
      }
      this.container = d3.select(container);
      this.loader = loader;
      this.measureIndex = 0;
      this.noteIdx = 0;
      this.position = 0;
      this.interval = null;
      this.svg = this.container.append("svg").attr("xmlns", "http://www.w3.org/2000/svg").attr("class", "drumMachine").attr("width", 1000).attr("height", 1000);
      self = this;
      jContainer = $(this.container[0][0]);
      this.popup = $("<div class=\"popup\">\n    <div class=\"overlay\" />\n    <div class=\"content\" />\n</div>");
      this.popup.find(".overlay").click(function() {
        self.hidePopup();
        return true;
      });
      jContainer.append(this.popup);
      this.parts = {
        instruments: DM.Part["new"]("Instruments", this, this.svg),
        playButtons: DM.Part["new"]("PlayButtons", this, this.svg),
        measures: DM.Part["new"]("Measures", this, this.svg),
        io: DM.Part["new"]("IO", this, this.svg)
      };
      this.measures = [];
      this.measures.push(new DM.Measure(this, [4, 4], 8, 120));
      this.measures.push(new DM.Measure(this, [3, 4], 8, 120));
      console.log(this);
    }

    DrumMachine.prototype.registerDelegation = function(from, name, method) {
      if (this[name] == null) {
        this[name] = function() {
          return method.apply(from, arguments);
        };
      }
      return this;
    };

    DrumMachine.prototype.draw = function() {
      var name, part, ref;
      ref = this.parts;
      for (name in ref) {
        part = ref[name];
        part.draw();
      }
      return this;
    };

    DrumMachine.prototype.drawPartial = function(ignoreList) {
      var name, part, ref;
      if (!(ignoreList instanceof Array)) {
        ignoreList = [ignoreList];
      }
      ref = this.parts;
      for (name in ref) {
        part = ref[name];
        if (indexOf.call(ignoreList, name) < 0) {
          part.draw();
        }
      }
      return this;
    };

    DrumMachine.prototype.showPopup = function(onClose) {
      this.popup.fadeIn(200);
      this.popup.onClose = onClose;
      return this;
    };

    DrumMachine.prototype.hidePopup = function() {
      var base;
      if ((typeof (base = this.popup).onClose === "function" ? base.onClose() : void 0) === false) {
        return this;
      }
      this.popup.fadeOut(200);
      return this;
    };

    DrumMachine.prototype.setUsedInstruments = function() {
      var diff, instrumentNames, j, redraw;
      instrumentNames = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), redraw = arguments[j++];
      if (typeof redraw !== "boolean") {
        instrumentNames.push(redraw);
        redraw = true;
      }
      diff = DM.Utils.arrayDiff(this.parts.instruments.used, instrumentNames);
      this.parts.instruments.used = instrumentNames;
      this.addInstrumentsToMeasures.apply(this, slice.call(diff.added).concat([redraw]));
      this.removeInstrumentsFromMeasures.apply(this, slice.call(diff.removed).concat([redraw]));
      if (redraw === true) {
        this.parts.measures.draw();
      }
      return this;
    };

    DrumMachine.prototype.addInstrumentsToMeasures = function() {
      var instrumentNames, j, k, len, measure, redraw, ref;
      instrumentNames = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), redraw = arguments[j++];
      if (typeof redraw !== "boolean") {
        instrumentNames.push(redraw);
        redraw = true;
      }
      ref = this.measures;
      for (k = 0, len = ref.length; k < len; k++) {
        measure = ref[k];
        measure.addInstruments.apply(measure, instrumentNames);
      }
      if (redraw === true) {
        this.parts.measures.draw();
      }
      return this;
    };

    DrumMachine.prototype.removeInstrumentsFromMeasures = function() {
      var instrumentNames, j, k, len, measure, redraw, ref;
      instrumentNames = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), redraw = arguments[j++];
      if (redraw == null) {
        redraw = true;
      }
      if (typeof redraw !== "boolean") {
        instrumentNames.push(redraw);
        redraw = true;
      }
      ref = this.measures;
      for (k = 0, len = ref.length; k < len; k++) {
        measure = ref[k];
        measure.removeInstruments.apply(measure, instrumentNames);
      }
      if (redraw === true) {
        this.parts.measures.draw();
      }
      return this;
    };

    DrumMachine.prototype.addMeasure = function(measure) {
      console.log(this.measures);
      if (measure == null) {
        measure = new DM.Measure(this, this.instruments, 2, 4, 120);
      }
      this.measures.push(measure);
      this.draw();
      return this;
    };

    DrumMachine.prototype.removeMeasure = function(measure) {
      var m;
      this.measures = (function() {
        var j, len, ref, results;
        ref = this.measures;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          m = ref[j];
          if (m !== measure) {
            results.push(m);
          }
        }
        return results;
      }).call(this);
      this.draw();
      return this;
    };

    DrumMachine.prototype.startPlaying = function() {
      var currentMeasure, delay, playColumn, resetInterval, self;
      self = this;
      currentMeasure = this.measures[this.measureIndex];
      resetInterval = false;
      delay = currentMeasure.getDelay();
      playColumn = function() {
        var data, instrumentName, noteIndex, ref;
        if (resetInterval === true) {
          delay = currentMeasure.getDelay();
          window.clearInterval(self.interval);
          self.interval = window.setInterval(playColumn, delay);
          resetInterval = false;
        }
        noteIndex = currentMeasure.noteIndex;
        ref = currentMeasure.data;
        for (instrumentName in ref) {
          data = ref[instrumentName];
          if (data[noteIndex] === true) {
            dm.loader.drumkits["rock-drumkit"].play(instrumentName);
          }
        }
        if (noteIndex === currentMeasure.dataLength - 1) {
          currentMeasure.noteIndex = 0;
          currentMeasure.removeDot();
          if (self.measureIndex < self.measures.length - 1) {
            self.measureIndex++;
          } else {
            self.measureIndex = 0;
          }
          currentMeasure = self.measures[self.measureIndex];
          currentMeasure.appendDot();
          resetInterval = true;
        } else {
          currentMeasure.noteIndex++;
          currentMeasure.moveDot(delay / 4);
        }
        return true;
      };
      this.interval = window.setInterval(playColumn, delay);
      return this;
    };

    DrumMachine.prototype.pause = function() {
      window.clearInterval(this.interval);
      this.interval = null;
      return this;
    };

    DrumMachine.prototype.stop = function() {
      var j, len, measure, ref;
      this.pause();
      ref = this.measures;
      for (j = 0, len = ref.length; j < len; j++) {
        measure = ref[j];
        measure.noteIndex = 0;
      }
      this.measureIndex = 0;
      return this;
    };

    DrumMachine.prototype.isPlaying = function() {
      return this.interval != null;
    };

    return DrumMachine;

  })();

  $(document).ready(function() {
    var dm, loader, start, timer;
    timer = performance || Date;
    start = timer.now();
    dm = null;
    loader = new DM.SpriteLoader();
    return loader.load(function() {
      dm = new DM.DrumMachine(document.body, loader);
      dm.setUsedInstruments("Hi Hat 1", "Snare 1", "Kick 4", false);
      dm.draw();
      window.dm = dm;
      return console.log("time to create drum machine was " + (timer.now() - start) + " ms");
    });
  });

}).call(this);
