// Generated by CoffeeScript 1.9.3
(function() {
  var getCompletePath, isNumber,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.App = {};

  App.drumkits = {
    "Rock": {
      "Bass Kick Default": "Kicks/Kick 4.wav",
      "Bass Kick Dry": "Kicks/Kick 6.wav",
      "Hihat Default": "Hats/Hi Hat 1.wav",
      "Hihat Dry": "Hats/Hi Hat 6.wav",
      "Snare Default": "Snares/Snare 1.wav",
      "High tom": "Toms/tom001.wav",
      "Mid tom": "Toms/tom002.wav",
      "Low tom": "Toms/tom003.wav",
      "Crash": "Cymbals/crash 2.wav",
      "Ride": "Cymbals/ride 1.wav"
    }
  };

  isNumber = function(n) {
    if (n instanceof Number) {
      n = n.valueOf();
    }
    return typeof n === "number" && !isNaN(n) && isFinite(n);
  };

  App.Instrument = (function() {
    var count;

    count = 0;

    Instrument.getID = function() {
      return "id" + (count++);
    };

    function Instrument(name, kitName, pathToSound, volume) {
      var sound;
      if (volume == null) {
        volume = 50;
      }
      this._name = name.toString();
      this._kitName = kitName.toString();
      sound = soundManager.createSound({
        id: this.generateID(),
        url: pathToSound,
        autoLoad: true,
        volume: (isNumber(volume) ? volume : 50)
      });
      this._sound = sound;
    }

    Instrument.prototype.generateID = function() {
      return App.Instrument.getID();
    };

    Instrument.prototype.setName = function(name) {
      this._name = name;
      return this;
    };

    Instrument.prototype.getName = function() {
      return this._name;
    };

    Instrument.prototype.setSound = function(sound) {
      if (sound === null || (sound !== null && (sound.bytesLoaded != null))) {
        this._sound = sound;
      }
      return this;
    };

    Instrument.prototype.getSound = function() {
      return this._sound;
    };

    Instrument.prototype.serialize = function() {
      return {
        name: this._name,
        kitName: this._kitName,
        volume: this._sound.volume
      };
    };

    return Instrument;

  })();

  App.Measure = (function() {
    var count;

    Measure.maxBPM = 480;

    Measure.modes = [1, 2, 4, 8, 16];

    Measure.stepSizes = [16, 8, 4, 2, 1];

    count = 0;

    Measure.getID = function() {
      return "measure" + count++;
    };

    function Measure(_drumMachine, _instruments, quarterSplit, _beats, _bpm) {
      var col, data, idx, j, k, modes, ref, ref1, x, xMax, y, yMax;
      this._drumMachine = _drumMachine;
      this._instruments = _instruments;
      this._beats = _beats;
      this._bpm = _bpm;
      modes = App.Measure.modes;
      this._noteIndex = 0;
      this._div = null;
      this._id = App.Measure.getID();
      idx = App.Measure.modes.indexOf(quarterSplit);
      if (idx < 0) {
        idx = 1;
      }
      this._stepSize = App.Measure.stepSizes[idx];
      data = [];
      xMax = this._beats * modes[modes.length - 1];
      yMax = this._instruments.length;
      for (x = j = 0, ref = xMax; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
        col = [];
        for (y = k = 0, ref1 = yMax; 0 <= ref1 ? k < ref1 : k > ref1; y = 0 <= ref1 ? ++k : --k) {
          col.push(null);
        }
        data[x] = col;
      }
      this._data = data;
    }

    Measure.prototype.drawSettings = function() {
      var drawOptions, resetBPM, resetStepSize, settings;
      resetBPM = (function(_this) {
        return function(ev, textfield) {
          _this.setBPM(parseInt(textfield.value, 10));
          return _this;
        };
      })(this);
      resetStepSize = (function(_this) {
        return function(ev, select) {
          _this.setStepSize(parseInt(select.value, 10));
          _this.draw();
          return _this;
        };
      })(this);
      drawOptions = (function(_this) {
        return function() {
          var i, j, len, ref, res, val;
          res = "";
          ref = App.Measure.stepSizes;
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            val = ref[i];
            if (_this._stepSize !== val) {
              res += "<option value='" + val + "'>" + (App.Measure.modes[i] * 4) + "th</option>";
            } else {
              res += "<option value='" + val + "' selected>" + (App.Measure.modes[i] * 4) + "th</option>";
            }
          }
          return res;
        };
      })(this);
      settings = $("<div class=\"measureSettings\">\n    <div class=\"split setting\">\n        <select class=\"select\">\n            " + (drawOptions()) + "\n        </select>\n        notes,\n    </div>\n    <div class=\"bpm setting\">\n        BPM: <input class=\"bpm\" type=\"number\" value=\"" + this._bpm + "\" min=\"1\" max=\"" + App.Measure.maxBPM + "\" />\n    </div>\n    <div class=\"close setting\">\n        &#10006;\n    </div>\n    <div class=\"clear\" />\n</div>");
      settings.find(".select").change(function(ev) {
        return resetStepSize(ev, this);
      });
      settings.find("input.bpm").change(function(ev) {
        return resetBPM(ev, this);
      });
      settings.find(".close").click((function(_this) {
        return function(ev) {
          return _this.remove();
        };
      })(this));
      return settings;
    };

    Measure.prototype.draw = function() {
      var col, column, div, firstDraw, fn, i, idx, j, k, len, note, ref, ref1, ref2;
      div = this._div;
      firstDraw = !(div instanceof jQuery);
      if (firstDraw) {
        div = $("<div class='measure' id='" + this._id + "' />");
      }
      div.empty().append(this.drawSettings());
      ref1 = this._data;
      ref = this._stepSize;
      for ((ref > 0 ? (idx = j = 0, len = ref1.length) : idx = j = ref1.length - 1); ref > 0 ? j < len : j >= 0; idx = j += ref) {
        col = ref1[idx];
        column = $("<div class='column' data-colidx='" + idx + "' />");
        fn = (function(_this) {
          return function(i, note, idx) {
            return note.click(function() {
              _this.toggleNote(idx, i);
              if (_this.noteIsActive(idx, i)) {
                return note.addClass("active");
              } else {
                return note.removeClass("active");
              }
            });
          };
        })(this);
        for (i = k = 0, ref2 = col.length - 1; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
          note = col[i];
          note = $("<div class='instrument note" + (note != null ? " active" : "") + "' />");
          fn(i, note, idx);
          column.append(note);
        }
        div.append(column);
      }
      div.append("<div class='clear' />");
      if (firstDraw) {
        this._div = div;
      }
      return this;
    };

    Measure.prototype.remove = function() {
      this._drumMachine.removeMeasure(this);
      return this;
    };

    Measure.prototype.toggleNote = function(x, y) {
      if (this._data[x][y] instanceof App.Instrument) {
        this._data[x][y] = null;
      } else {
        this._data[x][y] = this._instruments[y];
      }
      return this;
    };

    Measure.prototype.noteIsActive = function(x, y) {
      return this._data[x][y] instanceof App.Instrument;
    };

    Measure.prototype.getDiv = function() {
      return this._div;
    };

    Measure.prototype.getNextColumn = function(activeNotes, cycle) {
      if (activeNotes == null) {
        activeNotes = true;
      }
      if (cycle == null) {
        cycle = false;
      }
      if (this._noteIndex === this._data.length - 1) {
        if (!cycle) {
          return this.getColumnAtIndex(activeNotes, -1);
        } else {
          this._noteIndex = 0;
        }
      } else {
        this._noteIndex += this._stepSize;
      }
      return this.getCurrentColumn(activeNotes);
    };

    Measure.prototype.resetPosition = function() {
      this._noteIndex = 0;
      return this;
    };

    Measure.prototype.getCurrentColumn = function(activeNotes) {
      if (activeNotes == null) {
        activeNotes = true;
      }
      return this.getColumnAtIndex(activeNotes, this._noteIndex);
    };

    Measure.prototype.getColumnAtIndex = function(activeNotes, idx) {
      var instrument;
      if (idx < 0 || idx >= this._data.length) {
        return null;
      }
      if (activeNotes === true) {
        return (function() {
          var j, len, ref, results;
          ref = this._data[idx];
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            instrument = ref[j];
            if (instrument != null) {
              results.push(instrument);
            }
          }
          return results;
        }).call(this);
      }
      return this._data[idx];
    };

    Measure.prototype.getIntervalDelay = function() {
      return ((this._beats * 60000) / this._bpm) / this.getVisibleLength();
    };

    Measure.prototype.getColumnDivs = function() {
      return this._div.find(".column");
    };

    Measure.prototype.getCurrentColumnDiv = function() {
      return this.getColumnDivs().eq(this._noteIndex / this._stepSize);
    };

    Measure.prototype.addInstumentToData = function(instrument) {
      var col, j, len, ref;
      ref = this._data;
      for (j = 0, len = ref.length; j < len; j++) {
        col = ref[j];
        col.push(null);
      }
      return this;
    };

    Measure.prototype.removeInstrumentFromData = function(index) {
      var col, j, len, ref;
      ref = this._data;
      for (j = 0, len = ref.length; j < len; j++) {
        col = ref[j];
        col.splice(index, 1);
      }
      return this;
    };

    Measure.prototype.serialize = function() {
      var col, data, j, k, len, len1, note, ref, temp;
      data = [];
      ref = this._data;
      for (j = 0, len = ref.length; j < len; j++) {
        col = ref[j];
        temp = [];
        for (k = 0, len1 = col.length; k < len1; k++) {
          note = col[k];
          if (note != null) {
            temp.push(1);
          } else {
            temp.push(0);
          }
        }
        data.push(temp);
      }
      return {
        beats: this._beats,
        bpm: this._bpm,
        data: data
      };
    };

    Measure.prototype.setBPM = function(bpm) {
      if ((1 <= bpm && bpm <= App.Measure.maxBPM)) {
        this._bpm = Math.floor(bpm);
      } else {
        this._bpm = 120;
      }
      return this;
    };

    Measure.prototype.setStepSize = function(stepSize) {
      if (indexOf.call(App.Measure.stepSizes, stepSize) >= 0) {
        this._stepSize = stepSize;
      } else {
        this._stepSize = 2;
      }
      return this;
    };

    Measure.prototype.setInstruments = function(instruments) {
      this._instruments = instruments;
      return this;
    };

    Measure.prototype.setData = function(data) {
      this._data = data;
      return this;
    };

    Measure.prototype.getDrumMachine = function() {
      return this._drumMachine;
    };

    Measure.prototype.getInstruments = function() {
      return this._instruments;
    };

    Measure.prototype.getVisibleLength = function() {
      return this._data.length / this._stepSize;
    };

    Measure.prototype.getBeats = function() {
      return this._beats;
    };

    Measure.prototype.getLength = function() {
      return this._data.length;
    };

    Measure.prototype.getID = function() {
      return this._id;
    };

    Measure.prototype.getNoteIndex = function() {
      return this._noteIndex;
    };

    Measure.prototype.getBPM = function() {
      return this._bpm;
    };

    return Measure;

  })();

  App.Part = (function() {
    Part["new"] = function(subClassName, master, container, className, id) {
      return new App["Part" + subClassName](master, container, className, id);
    };

    function Part(_master, container, _className, _id) {
      this._master = _master;
      this._className = _className;
      this._id = _id;
      if (!(container instanceof jQuery)) {
        this._container = $(container);
      } else {
        this._container = container;
      }
    }

    Part.prototype.makeContainer = function() {
      return $("<div id='" + this._id + "' class='" + this._className + "' />");
    };

    Part.prototype.draw = function() {
      throw new Error("Override this method to implement it!");
    };

    return Part;

  })();

  App.PartDrumkits = (function(superClass) {
    extend(PartDrumkits, superClass);

    function PartDrumkits(master, container, className, id) {
      PartDrumkits.__super__.constructor.call(this, master, container, className, id);
    }

    PartDrumkits.prototype.draw = function() {
      var div, filePath, firstDraw, instrumentName, kitFiles, kitName, master, ref;
      div = this._container.find("." + this._id);
      firstDraw = div.length === 0;
      master = this._master;
      if (firstDraw) {
        div = this.makeContainer();
      }
      div.empty();
      ref = master.getDrumkits();
      for (kitName in ref) {
        kitFiles = ref[kitName];
        for (instrumentName in kitFiles) {
          filePath = kitFiles[instrumentName];
          div.append("<div class=\"instrument\" data-kitname=\"" + kitName + "\" data-instrumentname=\"" + instrumentName + "\">\n    <div class=\"label\" style=\"margin-top: 2px;\">" + instrumentName + "</div>\n</div>");
        }
      }
      div.find(".instrument").draggable({
        cursor: "move",
        revert: "invalid",
        revertDuration: 200
      });
      if (firstDraw) {
        this._container.append(div);
      }
      return this;
    };

    return PartDrumkits;

  })(App.Part);

  App.PartInstruments = (function(superClass) {
    extend(PartInstruments, superClass);

    function PartInstruments(master, container, className, id) {
      PartInstruments.__super__.constructor.call(this, master, container, className, id);
    }

    PartInstruments.prototype.draw = function() {
      var div, firstDraw, idx, instrument, j, len, master, name, ref, temp;
      div = this._container.find("." + this._id);
      firstDraw = div.length === 0;
      master = this._master;
      if (firstDraw) {
        div = this.makeContainer();
      }
      div.empty();
      ref = master.getInstruments();
      for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
        instrument = ref[idx];
        if (instrument != null) {
          name = instrument.getName();
          temp = $("<div class=\"instrument\">\n        <input class=\"label\" value=\"" + name + "\" />\n        <!--span class=\"edit\" title=\"rename instrument\" /-->\n        <span class=\"close\" data-idx=\"" + idx + "\" title=\"delete instrument\">&#10006;</span>\n</div>");
          temp.find(".close").click(function() {
            master.removeInstrument(parseInt(this.getAttribute("data-idx"), 10));
            return false;
          });
        } else {
          name = "Drop drumkit here to add";
          temp = $("<div class=\"droppableArea\"><div class=\"instrument add\"><div class=\"label\" style=\"margin-top: 2px;\">" + name + "</div></div></div>");
          temp.droppable({
            accept: "#drumkits .instrument",
            over: function(ev, ui) {
              temp.animate({
                "padding-top": "34px"
              }, 200);
              return this;
            },
            out: function(ev, ui) {
              temp.animate({
                "padding-top": "0px"
              }, 200);
              return this;
            },
            drop: function(ev, ui) {
              var instrumentDiv, instrumentName, kitName;
              console.log(ui);
              instrumentDiv = ui.draggable;
              kitName = instrumentDiv.attr("data-kitname");
              instrumentName = instrumentDiv.attr("data-instrumentname");
              instrument = master.getDrumkits()[kitName][instrumentName];
              if (instrument != null) {
                master.addInstrument(instrument);
              }
              instrumentDiv.animate({
                left: 0,
                top: 0
              }, 200);
              return this;
            }
          });
        }
        div.append(temp);
      }
      if (firstDraw) {
        this._container.append(div);
      }
      return this;
    };

    return PartInstruments;

  })(App.Part);

  App.PartPlayButtons = (function(superClass) {
    extend(PartPlayButtons, superClass);

    function PartPlayButtons(master, container, className, id) {
      PartPlayButtons.__super__.constructor.call(this, master, container, className, id);
    }

    PartPlayButtons.prototype.makeContainer = function() {
      return $("<div id='" + this._id + "' class='" + this._className + "' />");
    };

    PartPlayButtons.prototype.draw = function() {
      var container, div, master, self;
      self = this;
      div = this._container.find("." + this._id);
      master = this._master;
      if (div.length > 0) {
        return this;
      }
      container = this.makeContainer();
      div = container.append("<div class='playbutton play' /><div class='playbutton stop' /><div class='clear' /><button class='import'>Import</button><button class='export'>Export</button>");
      div.find(".play").click(function() {
        var t;
        t = $(this);
        if (!master.isPlaying()) {
          t.addClass("pause");
          master.startPlaying();
        } else {
          t.removeClass("pause");
          master.pause();
        }
        return this;
      });
      div.find(".stop").click(function() {
        master.stop();
        div.find(".play").removeClass("pause");
        return this;
      });
      div.find(".import").click(function() {
        master.showPopup();
        return this;
      });
      div.find(".export").click(function() {
        master["export"]();
        return this;
      });
      this._container.append(container);
      return this;
    };

    return PartPlayButtons;

  })(App.Part);

  App.PartNotes = (function(superClass) {
    extend(PartNotes, superClass);

    function PartNotes(master, container, className, id) {
      PartNotes.__super__.constructor.call(this, master, container, className, id);
    }

    PartNotes.prototype.draw = function() {
      var addMeasureBtn, div, firstDraw, idx, j, len, mDiv, master, measure, ref;
      div = this._container.find("." + this._id);
      firstDraw = div.length === 0;
      master = this._master;
      if (firstDraw) {
        div = this.makeContainer();
      }
      div.empty();
      idx = 0;
      ref = master.getMeasures();
      for (j = 0, len = ref.length; j < len; j++) {
        measure = ref[j];
        mDiv = measure.draw().getDiv();
        mDiv.find(".column").each(function() {
          return $(this).attr("data-absidx", idx++);
        });
        div.append(mDiv);
      }
      addMeasureBtn = $("<button class='addMeasure'>add meausure</button>");
      addMeasureBtn.click(function() {
        master.addMeasure();
        return this;
      });
      div.append(addMeasureBtn);
      if (firstDraw) {
        this._container.append(div);
      }
      return this;
    };

    return PartNotes;

  })(App.Part);

  App.PartImportExport = (function(superClass) {
    extend(PartImportExport, superClass);

    function PartImportExport(master, container, className, id) {
      PartImportExport.__super__.constructor.call(this, master, container, className, id);
      this._div = null;
      this._text = "";
    }

    PartImportExport.prototype.draw = function() {
      var div, firstDraw, master;
      div = this._container.find("." + this._id);
      firstDraw = div.length === 0;
      master = this._master;
      if (firstDraw) {
        div = this.makeContainer().append("    <textarea id=\"copyFrom\" class=\"text\" />\n<!--button class=\"copy\" data-clipboard-target=\"copyFrom\" title=\"Click to copy data\">copy</button-->\n<button class=\"import\" title=\"import\">import</button>\n<button class=\"close\" title=\"close popup\">close</button>");
        div.find("button.import").click((function(_this) {
          return function() {
            master["import"]();
            return _this;
          };
        })(this));
        div.find("button.close").click(function() {
          master.hidePopup();
          return this;
        });
        this._div = div;
        master.setPopup(this._div);
        this._container.append(div);
      }
      return this;
    };

    PartImportExport.prototype.getDiv = function() {
      return this._div;
    };

    PartImportExport.prototype.setText = function(text, updateButton) {
      if (updateButton == null) {
        updateButton = true;
      }
      this._text = text;
      if (updateButton === true) {
        this._div.find(".copy").attr("data-clipboard-text", this._text);
      }
      return this;
    };

    return PartImportExport;

  })(App.Part);

  App.DrumMachine = (function() {
    DrumMachine["new"] = function(container, drumkits, instruments) {
      return new App.DrumMachine(container, drumkits, instruments);
    };

    function DrumMachine(container, _drumkits, instruments) {
      this._drumkits = _drumkits;
      if (instruments == null) {
        instruments = [];
      }
      if (!(container instanceof jQuery)) {
        container = $(container);
      }
      this._container = container;
      if (instruments instanceof Array) {
        this._instruments = instruments;
      } else {
        this._instruments = [];
      }
      this._measureIdx = 0;
      this._noteIdx = 0;
      this._position = 0;
      this._interval = null;
      this._popup = null;
      this._parts = [App.Part["new"]("Drumkits", this, container, "drumkits", "drumkits"), App.Part["new"]("PlayButtons", this, container, "playbuttons", "playbuttons"), App.Part["new"]("Instruments", this, container, "instruments", "instruments"), App.Part["new"]("Notes", this, container, "notes", "notes"), App.Part["new"]("ImportExport", this, container, "importExport", "importExport")];
      this._measures = [];
      this._measures.push(new App.Measure(this, this._instruments, 2, 4, 120));
      this._measures.push(new App.Measure(this, this._instruments, 2, 3, 120));
      console.log(this);
    }

    DrumMachine.prototype.draw = function() {
      var j, len, part, ref;
      ref = this._parts;
      for (j = 0, len = ref.length; j < len; j++) {
        part = ref[j];
        part.draw();
      }
      return this;
    };

    DrumMachine.prototype.drawPartial = function(ignoreList) {
      var drawPart, j, k, len, len1, part, partToIgnore, ref;
      if (!(ignoreList instanceof Array)) {
        ignoreList = [ignoreList];
      }
      ref = this._parts;
      for (j = 0, len = ref.length; j < len; j++) {
        part = ref[j];
        drawPart = true;
        for (k = 0, len1 = ignoreList.length; k < len1; k++) {
          partToIgnore = ignoreList[k];
          if (part instanceof partToIgnore) {
            drawPart = false;
            break;
          }
        }
        if (drawPart) {
          part.draw();
        }
      }
      return this;
    };

    DrumMachine.prototype.showPopup = function() {
      this._popup.fadeIn(200);
      return this;
    };

    DrumMachine.prototype.hidePopup = function() {
      this._popup.fadeOut(200);
      return this;
    };

    DrumMachine.prototype["export"] = function() {
      var instrument, instruments, json, measure, measures;
      instruments = (function() {
        var j, len, ref, results;
        ref = this._instruments;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          instrument = ref[j];
          if (instrument != null) {
            results.push(instrument.serialize());
          }
        }
        return results;
      }).call(this);
      measures = (function() {
        var j, len, ref, results;
        ref = this._measures;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          measure = ref[j];
          results.push(measure.serialize());
        }
        return results;
      }).call(this);
      json = JSON.stringify({
        "instruments": instruments,
        "measures": measures
      });
      this._popup.fadeIn(200).find(".text").val(json);
      return this;
    };

    DrumMachine.prototype["import"] = function() {
      var instrument, instruments, j, json, k, len, len1, makeInstrumentFromKit, measure, measures, newMeasure, temp, transformData;
      json = this._popup.find(".text").val();
      if ((json == null) || json === "") {
        return this;
      }
      json = $.parseJSON(json);
      if ((json == null) || $.isEmptyObject(json)) {
        return this;
      }
      makeInstrumentFromKit = (function(_this) {
        return function(kitName, name, volume) {
          var instrument, path;
          path = _this._drumkits[kitName];
          if ((path != null) && ((instrument = path[name]) != null)) {
            console.log(instrument);
            return instrument;
          }
          return null;
        };
      })(this);
      transformData = (function(_this) {
        return function(data, instruments) {
          var col, j, k, len, len1, note, x, y;
          for (x = j = 0, len = data.length; j < len; x = ++j) {
            col = data[x];
            for (y = k = 0, len1 = col.length; k < len1; y = ++k) {
              note = col[y];
              if (note === 0) {
                data[x][y] = null;
              } else {
                data[x][y] = instruments[y];
              }
            }
          }
          return data;
        };
      })(this);
      this._instruments = [];
      this._measures = [];
      instruments = json.instruments;
      measures = json.measures;
      for (j = 0, len = instruments.length; j < len; j++) {
        instrument = instruments[j];
        temp = makeInstrumentFromKit(instrument.kitName, instrument.name, instrument.volume);
        if (temp != null) {
          this._instruments.push(temp);
        }
      }
      this._instruments.push(null);
      for (k = 0, len1 = measures.length; k < len1; k++) {
        measure = measures[k];
        newMeasure = new App.Measure(this, this._instruments, 2, measure.beats, measure.bpm);
        newMeasure.setData(transformData(measure.data, this._instruments));
        this._measures.push(newMeasure);
      }
      this.drawPartial([App.PartDrumkits, App.PartImportExport]);
      this.hidePopup();
      return this;
    };

    DrumMachine.prototype.addInstrument = function(instrument) {
      var j, len, measure, ref;
      if (instrument instanceof App.Instrument) {
        this._instruments.splice(this._instruments.length - 1, 0, instrument);
        ref = this._measures;
        for (j = 0, len = ref.length; j < len; j++) {
          measure = ref[j];
          measure.addInstumentToData(instrument);
        }
        this.drawPartial([App.PartDrumkits, App.PartImportExport]);
      }
      return this;
    };

    DrumMachine.prototype.removeInstrument = function(index) {
      var j, len, measure, ref;
      this._instruments.splice(index, 1);
      ref = this._measures;
      for (j = 0, len = ref.length; j < len; j++) {
        measure = ref[j];
        measure.removeInstrumentFromData(index);
      }
      this.drawPartial([App.PartDrumkits, App.PartImportExport]);
      return this;
    };

    DrumMachine.prototype.addMeasure = function(measure) {
      console.log(this._measures);
      if (measure == null) {
        measure = new App.Measure(this, this._instruments, 2, 4, 120);
      }
      this._measures.push(measure);
      this.draw();
      return this;
    };

    DrumMachine.prototype.removeMeasure = function(measure) {
      var m;
      this._measures = (function() {
        var j, len, ref, results;
        ref = this._measures;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          m = ref[j];
          if (m !== measure) {
            results.push(m);
          }
        }
        return results;
      }).call(this);
      this.draw();
      return this;
    };

    DrumMachine.prototype.getCurrentMeasure = function() {
      return this._measures[this._measureIdx];
    };

    DrumMachine.prototype.nextMeasure = function() {
      var ref;
      if ((0 <= (ref = this._measureIdx) && ref < this._measures.length - 1)) {
        this._measureIdx++;
      } else {
        this._measureIdx = 0;
      }
      return this;
    };

    DrumMachine.prototype.getIntervalDelay = function(measure) {
      if (measure == null) {
        measure = this.getCurrentMeasure();
      }
      return measure.getIntervalDelay();
    };

    DrumMachine.prototype.startPlaying = function() {
      var colDiv, currentColumn, currentMeasure, playColumn, prevDiv;
      currentMeasure = this.getCurrentMeasure();
      currentColumn = currentMeasure.getCurrentColumn();
      colDiv = currentMeasure.getCurrentColumnDiv();
      prevDiv = colDiv.prev();
      playColumn = (function(_this) {
        return function() {
          var instrument, j, len;
          if (prevDiv != null) {
            prevDiv.removeClass("current");
          }
          colDiv.addClass("current");
          for (j = 0, len = currentColumn.length; j < len; j++) {
            instrument = currentColumn[j];
            instrument.getSound().play();
          }
          currentColumn = currentMeasure.getNextColumn();
          prevDiv = colDiv;
          if (currentColumn == null) {
            currentMeasure = _this.nextMeasure().getCurrentMeasure().resetPosition();
            currentColumn = currentMeasure.getCurrentColumn();
            colDiv = currentMeasure.getColumnDivs().eq(0);
            window.clearInterval(_this._interval);
            _this._interval = window.setInterval(playColumn, _this.getIntervalDelay(currentMeasure));
          } else {
            colDiv = colDiv.next();
          }
          return true;
        };
      })(this);
      return this._interval = window.setInterval(playColumn, this.getIntervalDelay(currentMeasure));
    };

    DrumMachine.prototype.pause = function() {
      window.clearInterval(this._interval);
      return this._interval = null;
    };

    DrumMachine.prototype.stop = function() {
      var j, len, measure, ref;
      this.pause();
      ref = this._measures;
      for (j = 0, len = ref.length; j < len; j++) {
        measure = ref[j];
        measure.resetPosition();
      }
      this._measureIdx = 0;
      return this.removeCurrentColumnIndicator();
    };

    DrumMachine.prototype.isPlaying = function() {
      return this._interval != null;
    };

    DrumMachine.prototype.removeCurrentColumnIndicator = function() {
      $(".column.current").removeClass("current");
      return this;
    };

    DrumMachine.prototype.getDrumkits = function() {
      return this._drumkits;
    };

    DrumMachine.prototype.getInstruments = function() {
      return this._instruments;
    };

    DrumMachine.prototype.getMeasures = function() {
      return this._measures;
    };

    DrumMachine.prototype.setPopup = function(div) {
      this._popup = div;
      return this;
    };

    return DrumMachine;

  })();

  getCompletePath = function(kitName, instrumentPath) {
    var getPathFromKitName;
    getPathFromKitName = function(name) {
      return name.replace(" ", "_").toLowerCase();
    };
    return "kits/" + getPathFromKitName(kitName) + "/" + instrumentPath;
  };

  $(document).ready(function() {
    var makeInstruments;
    console.log("asdf");
    makeInstruments = function(drumkits) {
      var drumkitDiv, instrumentDiv, instrumentName, instrumentPath, kitFiles, kitName, res;
      res = $("<div class='drumkits' />");
      for (kitName in drumkits) {
        kitFiles = drumkits[kitName];
        drumkitDiv = $("<div class='drumkit' />");
        for (instrumentName in kitFiles) {
          instrumentPath = kitFiles[instrumentName];
          instrumentDiv = $("<div class='instrument' />");
          instrumentDiv.text(instrumentName);
          drumkitDiv.append(instrumentDiv);
          kitFiles[instrumentName] = new App.Instrument(instrumentName, kitName, getCompletePath(kitName, instrumentPath), 80);
        }
        res.append(drumkitDiv);
      }
      return drumkits;
    };
    return soundManager.setup({
      url: "includes/swf/",
      onready: function() {
        var dm;
        console.log("soundmanager is ready");
        dm = new App.DrumMachine($(document.body), makeInstruments(App.drumkits), [App.drumkits.Rock["Bass Kick Default"], App.drumkits.Rock["Snare Default"], App.drumkits.Rock["Hihat Default"], null]);
        dm.draw();
        return window.dm = dm;
      }
    });
  });

}).call(this);
